@using System.Linq.Expressions
@inherits UiComponentBase
@implements IDisposable
@typeparam TValue

<div @attributes="@AdditionalAttributes" class="@(Merge("text-xs text-destructive space-y-2"))">
    @foreach (var message in EditContext.GetValidationMessages(_fieldIdentifier))
    {
        <p>@message</p>
    }
</div>

@code {
    private FieldIdentifier _fieldIdentifier;
    private readonly EventHandler<ValidationStateChangedEventArgs>? _validationStateChangedHandler;

    [CascadingParameter]
    private EditContext EditContext { get; set; } = null!;

    [Parameter, EditorRequired]
    public Expression<Func<TValue>> For { get; set; } = null!;

    public FormInvalidFeedback() => _validationStateChangedHandler = (_, _) => StateHasChanged();

    protected override void OnParametersSet()
    {
        if (EditContext is null)
            throw new InvalidOperationException("You must place the FormInvalidFeedback component inside an AppForm");

        _fieldIdentifier = FieldIdentifier.Create(For);
        EditContext.OnValidationStateChanged += _validationStateChangedHandler;
    }

    void IDisposable.Dispose() => EditContext.OnValidationStateChanged -= _validationStateChangedHandler;
}