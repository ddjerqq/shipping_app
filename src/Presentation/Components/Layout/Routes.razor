@using System.Globalization
@using Blazored.Toast
@using Blazored.Toast.Configuration
@implements IAsyncDisposable
@inject NavigationManager Nav
@inject IJSRuntime Js
@inject BrowserInternalizationProvider BrowserInternalizationProvider

<CascadingBlazoredModal
    Class="min-w-sm w-full max-w-full text-lg first:hidden rounded-md flex flex-col justify-center text-center p-2"
    OverlayCustomClass="backdrop-blur p-4"
    Position="ModalPosition.Middle"
    AnimationType="ModalAnimationType.FadeInOut">

    <CascadingValue Value="BrowserTimeZone">
        <CascadingValue Value="BrowserCultureInfo">
            <ErrorBoundary @ref="ErrorBoundary" Context="exception">
                <ChildContent>
                    <Router AppAssembly="@typeof(Program).Assembly">
                        <Found Context="routeData">
                            <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
                            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                                <NotAuthorized>
                                    <Redirect To="/auth/login" Force/>
                                </NotAuthorized>
                            </AuthorizeRouteView>
                        </Found>
                        <NotFound>
                            <Redirect To="/404" Force/>
                        </NotFound>
                    </Router>
                </ChildContent>
                <ErrorContent>
                    <Error Exception="exception" ErrorBoundary="ErrorBoundary"/>
                </ErrorContent>
            </ErrorBoundary>
        </CascadingValue>
    </CascadingValue>
</CascadingBlazoredModal>

<BlazoredToasts
    Position="@ToastPosition.TopCenter"
    Timeout="5"
    MaxToastCount="3"
    ShowCloseButton="false"
    ShowProgressBar="false"
    PauseProgressOnHover="true"
    RemoveToastsOnNavigation="false"/>

@code {
    private IJSObjectReference? _themeModule;
    private ErrorBoundary ErrorBoundary { get; set; } = null!;
    public TimeZoneInfo BrowserTimeZone { get; set; } = TimeZoneInfo.Utc;
    public CultureInfo BrowserCultureInfo { get; set; } = CultureInfo.InvariantCulture;

    protected override async Task OnInitializedAsync()
    {
        BrowserTimeZone = await BrowserInternalizationProvider.GetBrowserTimeZoneAsync();
        BrowserCultureInfo = await BrowserInternalizationProvider.GetBrowserLocaleAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _themeModule = await Js.InvokeAsync<IJSObjectReference>(
                "import",
                CancellationToken,
                "./Components/Shared/ThemeToggle.razor.js");

            await Js.InvokeVoidAsync("window.initFlowbite", CancellationToken);

            var theme = await _themeModule.InvokeAsync<string>("getTheme", CancellationToken);
            await _themeModule.InvokeVoidAsync("setTheme", CancellationToken, theme);
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_themeModule is not null)
        {
            try
            {
                await _themeModule.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
