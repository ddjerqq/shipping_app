@using Application.Cqrs.Staff.Queries
@using Domain.Common
@attribute [StreamRendering]

<Card class="w-full text-start">
    <Header>
        <CardTitle class="text-2xl">Search</CardTitle>
    </Header>
    <Content class="space-y-4">
        <div>
            <FormField>
                <FormLabel>Query</FormLabel>
                <input class="@FormInputText.BaseClass"
                       id="query"
                       placeholder="Enter query..."
                       value="@Command.Value"
                       @oninput="@ValueChanged"/>
                <FormDescription>
                    You can search for Users, Packages and Races here.
                </FormDescription>
            </FormField>
        </div>

        @if (Results.Any())
        {
            <h2>Results:</h2>
        }

        <div class="flex flex-col gap-2 text-sm max-h-[450px] sm:max-h-80 overflow-y-scroll">
            @foreach (var result in Results)
            {
                switch (result)
                {
                    case GenericSearchResult.RaceSearchResult { Value: var race }:
                        <a href="/races/@race.Id"
                           class="flex justify-start items-center gap-4 bg-card text-card-foreground rounded-lg border shadow-sm p-4">
                            <Blazicon Svg="@Lucide.Plane" class="!size-8"/>
                            <div class="flex flex-col">
                                <span>@race.Name</span>
                                <span class="text-muted-foreground">@race.Origin - @race.Destination</span>
                            </div>
                        </a>
                        break;
                    case GenericSearchResult.PackageSearchResult { Value: var package }:
                        <a href="/packages/@package.Id"
                           class="flex justify-start items-center gap-4 bg-card text-card-foreground rounded-lg border shadow-sm p-4">
                            <Blazicon Svg="@Lucide.Package" class="!size-8"/>
                            <div class="flex flex-col">
                                <span>@package.TrackingCode</span>
                                <span class="text-muted-foreground">@package.Owner?.Username</span>
                            </div>
                        </a>
                        break;
                    case GenericSearchResult.UserSearchResult { Value: var user }:
                        <a href="/users/@user.Id"
                           class="flex justify-start items-center gap-4 bg-card text-card-foreground rounded-lg border shadow-sm p-4">
                            <Blazicon Svg="@Lucide.User" class="!size-8"/>
                            <div class="flex flex-col">
                                <span>@user.Username.CapitalizeName()</span>
                                <span class="text-muted-foreground">@user.Email</span>
                            </div>
                        </a>
                        break;
                }
            }
        </div>
    </Content>
</Card>

@code {
    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; } = null!;

    [Parameter, EditorRequired]
    public MarkupString Text { get; set; }

    private GenericSearchQuery Command { get; set; } = new(null!);
    private IEnumerable<GenericSearchResult> Results { get; set; } = [];

    private async Task FetchData()
    {
        Results = await SendCommandAsync(Command);
    }

    private async Task ValueChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(value))
        {
            Command = new GenericSearchQuery(value);
            await FetchData();
        }
    }
}