<div class="flex flex-col gap-2 items-center justify-center">
    <div class="flex gap-2 items-center">
        <Button Size="icon"
                Variant="outline"
                @onclick="@(async () => await ChangePage(-1))"
                disabled="@(State.Page == 0)">
            <Blazicon Svg="@Lucide.ChevronLeft"/>
        </Button>

        <div class="text-sm">
            <span>Page @(State.Page + 1)</span>
            <span>of</span>
            <span>@(State.PageCount)</span>
        </div>

        <Button Size="icon"
                Variant="outline"
                @onclick="@(async () => await ChangePage(1))"
                disabled="@(State.Page == State.Total / State.PerPage)">
            <Blazicon Svg="@Lucide.ChevronRight"/>
        </Button>
    </div>

    <span class="text-muted-foreground text-sm">
        Showing @(State.Skip + 1) through @(State.Skip + State.PerPage). Total: @State.Total
    </span>
</div>

@code {
    public sealed class PaginatorState(int page, int total, int perPerPage = 10)
    {
        public int Page { get; set; } = page;
        public int Total { get; set; } = total;
        public int PerPage { get; set; } = perPerPage;

        public int Skip => Page * PerPage;
        public int PageCount => Total / PerPage is var cnt && cnt == 0 ? 1 : cnt;
    }

    private async Task ChangePage(int page)
    {
        State.Page += page;

        if (StateChanged.HasDelegate)
            await StateChanged.InvokeAsync();
    }

    [Parameter, EditorRequired]
    public PaginatorState State { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<PaginatorState> StateChanged { get; set; }
}