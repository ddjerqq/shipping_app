@inject IJSRuntime Js
@implements IAsyncDisposable

<Button Variant="outline" Size="icon" class="!size-9 relative hidden sm:flex" data-dropdown-toggle="theme-dropdown">
    <Blazicon Svg="Icons.Sun" class="rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0"/>
    <Blazicon Svg="Icons.Moon" class="absolute rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100"/>
</Button>

<div id="theme-dropdown" class="z-10 hidden  divide-background-100 rounded-lg shadow w-36 border bg-background">
    <Button Variant="ghost" class="shadow-none justify-start w-full rounded-none" @onclick="@(async () => await SetTheme("light"))">
        <Blazicon Svg="Icons.Sun"/>
        Light
    </Button>
    <Button Variant="ghost" class="shadow-none justify-start w-full rounded-none" @onclick="@(async () => await SetTheme("dark"))">
        <Blazicon Svg="Icons.Moon"/>
        Dark
    </Button>
    <Button Variant="ghost" class="shadow-none justify-start w-full rounded-none" @onclick="@(async () => await SetTheme("system"))">
        <Blazicon Svg="Icons.Monitor"/>
        System
    </Button>
</div>


@code {
    private IJSObjectReference? _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>(
                "import",
                CancellationToken,
                "./Components/Shared/ThemeToggle.razor.js");
        }
    }

    private async Task SetTheme(string theme)
    {
        if (_module is not null)
            await _module.InvokeVoidAsync("setTheme", CancellationToken, theme);
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}