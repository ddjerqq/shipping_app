@page "/users/{Id}"
@using Application.Services
@using Domain.Aggregates
@using Domain.Common
@layout HomeLayout
@inject IAppDbContext DbContext
@attribute [Authorize(Roles = "Admin")]
@attribute [StreamRendering]

<PageTitle>User details</PageTitle>

@if (User is not null)
{
    <Card class="mx-auto mt-4">
        <Header class="flex-row justify-between">
            <div class="space-y-2">
                <CardTitle class="text-2xl">@User.Username.CapitalizeName()</CardTitle>
                @* // TODO delete user from here through a confirmation modal *@
            </div>
        </Header>
        <Content>
            <AppForm @bind-Model="User" OnValidSubmit="OnValidSubmit">
                <FormField>
                    <FormLabel for="full-name">Full Name</FormLabel>
                    <FormInputText id="full-name"
                                   Class="capitalize"
                                   Value="@User.Username"
                                   ValueExpression="@(() => User.Username)"
                                   type="text"
                                   disabled/>
                </FormField>

                <FormField>
                    <FormLabel for="personal-id">Personal id</FormLabel>
                    <FormInputText id="personal-id"
                                   Value="@User.PersonalId"
                                   ValueExpression="@(() => User.PersonalId)"
                                   type="text"
                                   disabled/>
                </FormField>

                <FormField>
                    <FormLabel for="email">Email address</FormLabel>
                    <FormInputText id="email"
                                   Value="@User.Email"
                                   ValueExpression="@(() => User.Email)"
                                   type="text"
                                   disabled/>
                </FormField>

                <FormField>
                    <FormLabel for="phone">Phone</FormLabel>
                    <FormInputText id="phone"
                                   Value="@User.PhoneNumber"
                                   ValueExpression="@(() => User.PhoneNumber)"
                                   type="tel"
                                   disabled/>
                </FormField>

                @* <Button type="submit" disabled="@IsLoading"> *@
                @*     @if (IsLoading) *@
                @*     { *@
                @*         <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/> *@
                @*     } *@
                @*     Update your info *@
                @* </Button> *@
            </AppForm>
        </Content>
        <Footer class="text-sm text-muted-foreground">
            User ID: @Id
        </Footer>
    </Card>
}

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    private UserId? UserId => Domain.Aggregates.UserId.TryParse(Id, null, out var id) ? id : null;
    private User? User { get; set; }
    private string? InvoiceUrl { get; set; }
    private string? PictureUrl { get; set; }

    private IBrowserFile? InvoiceFile { get; set; }
    private IBrowserFile? PictureFile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await DbContext.Users
            .FindAsync([UserId], CancellationToken);
    }

    private async Task OnValidSubmit()
    {
        await DbContext.SaveChangesAsync(CancellationToken);
        ShowSuccess("User updated successfully");
    }
}