@page "/users/{Id}"
@using Application.Cqrs.Users.Commands
@using Application.Services
@using Blazored.Modal.Services
@using Domain.Aggregates
@using Presentation.Services
@using Domain.ValueObjects
@using Domain.Common
@layout HomeLayout
@inject IAppDbContext DbContext
@inject IModalService ModalService
@inject IJwtGenerator JwtGenerator
@inject CookieService Cookies
@attribute [Authorize(Roles = "Admin")]
@attribute [StreamRendering]

<PageTitle>@Locale.user_details</PageTitle>

@if (User is not null)
{
    <Card class="mx-auto mt-4">
        <Header class="flex-row justify-between">
            <div class="space-y-2">
                <CardTitle class="text-2xl">@User.Username.CapitalizeName()</CardTitle>
            </div>
        </Header>
        <Content>
            <AppForm @bind-Model="User" OnValidSubmit="OnValidSubmit">
                <FormField>
                    <FormLabel for="full-name">@Locale.full_name</FormLabel>
                    <FormInputText id="full-name"
                                   Class="capitalize"
                                   Value="@User.Username"
                                   ValueExpression="@(() => User.Username)"
                                   type="text"
                                   disabled/>
                </FormField>

                <FormField>
                    <FormLabel for="personal-id">@Locale.personal_id</FormLabel>
                    <FormInputText id="personal-id"
                                   @bind-Value="@User.PersonalId"
                                   type="text"
                                   disabled/>
                </FormField>

                <FormField>
                    <FormLabel for="email">@Locale.email</FormLabel>
                    <FormInputText id="email"
                                   Value="@User.Email"
                                   ValueExpression="@(() => User.Email)"
                                   type="text"
                                   disabled/>
                </FormField>

                <FormField>
                    <FormLabel for="phone">@Locale.phone_number</FormLabel>
                    <FormInputText id="phone"
                                   Value="@User.PhoneNumber"
                                   ValueExpression="@(() => User.PhoneNumber)"
                                   type="tel"
                                   disabled/>
                </FormField>

                <FormField>
                    <FormLabel for="role">@Locale.role</FormLabel>
                    <FormInputEnum Value="@User.Role" ValueExpression="@(() => User.Role)"
                                   Options="@(Enum.GetValues<Role>())" disabled />
                </FormField>

                <AuthorizeView Policy="sudo">
                    <Button @onclick="LoginAsUser" Variant="outline" disabled="@IsLoading">
                        <Blazicon Svg="Icons.LogIn"/>
                        @Locale.login_as_this_user
                    </Button>
                </AuthorizeView>

                <InlineFormFieldContainer>
                    <Button @onclick="DeleteUser" type="button" Variant="destructive"
                            disabled="@IsLoading">
                        <Blazicon Svg="Icons.Trash"/>
                        @Locale.delete
                    </Button>

                    <Button type="submit" Variant="default"
                            disabled title="Updating users is disabled for now, because changing their data is not yet supported">
                        <Blazicon Svg="Icons.Save"/>
                        @Locale.save_changes
                    </Button>
                </InlineFormFieldContainer>
            </AppForm>
        </Content>
        <Footer class="text-sm text-muted-foreground">
            @Locale.user ID: @Id
        </Footer>
    </Card>
}

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    private UserId? UserId => Domain.Aggregates.UserId.TryParse(Id, null, out var id) ? id : null;
    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await DbContext.Users
            .FindAsync([UserId], CancellationToken);
    }

    private async Task OnValidSubmit()
    {
        await DbContext.SaveChangesAsync(CancellationToken);
        ShowSuccess("User updated successfully");
    }

    private async Task DeleteUser()
    {
        var modal = ModalService.ShowConfirmationModal((MarkupString)$"Are you sure you want to delete {User!.Username}?<br/> Their account will be deleted after 30 days.");
        var result = await modal.Result;

        if (result.Cancelled) return;

        await SendCommandAsync(new DeleteUserAccountCommand(User.Id));
        ShowSuccess("User account is scheduled for deletion.");
        NavigationManager.NavigateTo("/users/all");
    }

    private async Task LoginAsUser()
    {
        if (User is null)
            throw new InvalidOperationException("User is null");

        var token = JwtGenerator.GenerateToken(User, TimeSpan.FromDays(1));
        await Cookies.SetCookieAsync(Infrastructure.Services.JwtGenerator.CookieName, token);
        NavigationManager.NavigateTo("/", true);
    }
}