@page "/races/all"
@layout HomeLayout
@using Application.Services
@using Domain.Entities
@using Microsoft.EntityFrameworkCore
@inject IAppDbContext DbContext
@attribute [Authorize(Roles = "Staff,Admin")]

<PageTitle>All races</PageTitle>

<Card>
    <Header>
        <CardTitle>All races</CardTitle>
        <Description class="grid grid-cols-1 sm:grid-cols-2 gap-2">
            <Button Href="/races/add_package" Variant="outline" class="text-primary">
                <Blazicon Svg="Lucide.Box"/>
                Add package to race
            </Button>

            <Button Href="/races/new" Variant="default">
                <Blazicon Svg="Lucide.Plus"/>
                Create
            </Button>
        </Description>
    </Header>
    <Content>
        <div class="space-y-2 overflow-y-scroll max-h-[600px]">
            @foreach (var race in Races)
            {
                <Button Href="@($"/races/{race.Id}")" Variant="outline" Size="lg"
                        class="p-4 h-auto justify-center grid grid-cols-2 gap-y-6 md:grid-cols-4">
                    <div class="flex gap-4 items-center">
                        <Blazicon Svg="@Lucide.Plane" class="hidden md:block !size-9"/>

                        <div class="flex flex-col gap-1 justify-center">
                            <span class="text-xs text-muted-foreground">Name</span>
                            <span
                                class="truncate font-medium capitalize leading-none flex gap-2 justify-start sm:justify-center align-middle">
                                <Blazicon Svg="@Lucide.Signpost"/>
                                <span class="hidden sm:block">@race.QualifiedName</span>
                                <span class="block sm:hidden">@race.Name</span>
                            </span>
                        </div>
                    </div>


                    <div class="flex flex-col gap-1 text-start md:text-center justify-center">
                        <span class="text-xs text-muted-foreground">Packages</span>
                        <span class="font-medium capitalize leading-none flex gap-2 justify-start sm:justify-center align-middle">
                            <Blazicon Svg="@Lucide.Package"/>
                            @race.Packages.Count
                        </span>
                    </div>

                    <div class="flex flex-col gap-1 text-start md:text-center justify-center">
                        <span class="text-xs text-muted-foreground">Takeoff</span>
                        <span class="font-medium capitalize leading-none flex gap-2 justify-start sm:justify-center align-middle">
                            <Blazicon Svg="@Lucide.PlaneTakeoff"/>
                            @race.Start.ToString("dd MMM yyyy")
                        </span>
                    </div>

                    <div class="flex flex-col gap-1 text-start md:text-center justify-center">
                        <span class="text-xs text-muted-foreground">Landing</span>
                        <span class="font-medium capitalize leading-none flex gap-2 justify-start sm:justify-center align-middle">
                            <Blazicon Svg="@Lucide.PlaneLanding"/>
                            @race.Arrival.ToString("dd MMM yyyy")
                        </span>
                    </div>
                </Button>
            }
        </div>
    </Content>
    <Footer>
        <Paginator State="@PaginatorState" StateChanged="@FetchData"/>
    </Footer>
</Card>

@code {
    private IEnumerable<Race> Races { get; set; } = [];
    private Paginator.PaginatorState PaginatorState { get; set; } = new(1, 0);

    protected override async Task OnInitializedAsync()
    {
        var totalRaces = await DbContext.Races.CountAsync();
        PaginatorState = new Paginator.PaginatorState(0, totalRaces);

        await FetchData();
    }

    private async Task FetchData()
    {
        Races = await DbContext.Races
            .Include(race => race.Packages)
            .OrderByDescending(x => x.Id)
            .Skip(PaginatorState.Skip)
            .Take(PaginatorState.PerPage)
            .ToListAsync(CancellationToken);
    }
}
