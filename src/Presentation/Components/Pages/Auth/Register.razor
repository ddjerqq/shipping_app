@page "/auth/register"
@using System.Globalization
@using Application.Cqrs.Users.Commands
@using Presentation.Components.Ui.Form
@inject CookieService Cookie
@attribute [AllowAnonymous]

<PageTitle>Register</PageTitle>

<div class="p-6 md:p-8 space-y-4">
    <AuthHeader Title="Create an account"/>

    <AppForm @bind-Model="Command" OnValidSubmit="RegisterUser" novalidate class="grid gap-6">
        <div class="w-full flex flex-row gap-4 justify-between">
            <FormField>
                <FormLabel for="full-name">Full name</FormLabel>
                <FormInputText id="full-name"
                               @bind-Value="@Command.FullName"
                               placeholder="Enter full name"
                               type="full-name"
                               required
                               autocomplete="cc-name"
                               disabled="@IsLoading"/>

                <FormInvalidFeedback For="@(() => Command.FullName)"/>
            </FormField>

            <FormField>
                <FormLabel for="email">Email</FormLabel>
                <FormInputText id="email"
                               @bind-Value="@Command.Email"
                               placeholder="Enter email"
                               type="email"
                               required
                               autocomplete="email"
                               disabled="@IsLoading"/>

                <FormInvalidFeedback For="@(() => Command.Email)"/>
            </FormField>
        </div>

        <div class="w-full flex flex-row gap-4 justify-between">
            <FormField>
                <FormLabel for="phone">Phone number</FormLabel>
                <FormInputText id="phone"
                               @bind-Value="@Command.PhoneNumber"
                               placeholder="+955 599123123"
                               type="phone"
                               required
                               autocomplete="tel mobile"
                               disabled="@IsLoading"/>

                <FormInvalidFeedback For="@(() => Command.PhoneNumber)"/>
            </FormField>

            <FormField>
                <FormLabel for="personal-id">Personal Id</FormLabel>
                <FormInputText id="personal-id"
                               @bind-Value="@Command.PersonalId"
                               placeholder="Id or SSN"
                               type="email"
                               required
                               autocomplete="personal-id"
                               disabled="@IsLoading"/>

                <FormInvalidFeedback For="@(() => Command.PersonalId)"/>
            </FormField>
        </div>

        <FormField>
            <FormLabel for="birth-date">Birth date</FormLabel>
            <InputDate id="birth-date"
                       class="@FormInputText.BaseClass"
                       @bind-Value="@Command.BirthDate"
                       Type="InputDateType.Date"
                       required
                       autocomplete="bday"
                       disabled="@IsLoading"/>

            <FormInvalidFeedback For="@(() => Command.BirthDate)"/>
        </FormField>

        <FormField>
            <FormLabel for="password">Password</FormLabel>
            <FormInputText id="password"
                           @bind-Value="@Command.Password"
                           placeholder="Enter password"
                           type="password"
                           required
                           autocomplete="new-password"
                           disabled="@IsLoading"/>

            <FormDescription Class="w-full flex justify-between">
                Password must contain at least 12 characters
            </FormDescription>

            <FormInvalidFeedback For="@(() => Command.Password)"/>
        </FormField>

        @* <div class="w-full flex flex-row gap-4 justify-between"> *@
        @*     <FormField> *@
        @*         <FormLabel for="country">Country</FormLabel> *@
        @*         <FormInputText id="country" *@
        @*                        @bind-Value="@Command.Country" *@
        @*                        type="text" *@
        @*                        required *@
        @*                        autocomplete="shipping country" *@
        @*                        disabled="@IsLoading"/> *@
        @* *@
        @*         <FormInvalidFeedback For="@(() => Command.Country)"/> *@
        @*     </FormField> *@
        @* *@
        @*     <FormField> *@
        @*         <FormLabel for="state">State</FormLabel> *@
        @*         <FormInputText id="state" *@
        @*                        @bind-Value="@Command.State" *@
        @*                        type="text" *@
        @*                        autocomplete="shipping address-level1" *@
        @*                        disabled="@IsLoading"/> *@
        @* *@
        @*         <FormInvalidFeedback For="@(() => Command.State)"/> *@
        @*     </FormField> *@
        @* </div> *@
        @* *@
        @* <div class="w-full flex flex-row gap-4 justify-between"> *@
        @*     <FormField> *@
        @*         <FormLabel for="city">City</FormLabel> *@
        @*         <FormInputText id="city" *@
        @*                        @bind-Value="@Command.City" *@
        @*                        type="text" *@
        @*                        required *@
        @*                        autocomplete="shipping address-level2" *@
        @*                        disabled="@IsLoading"/> *@
        @* *@
        @*         <FormInvalidFeedback For="@(() => Command.City)"/> *@
        @*     </FormField> *@
        @* *@
        @*     <FormField> *@
        @*         <FormLabel for="zip">Zip code</FormLabel> *@
        @*         <FormInputText id="zip" *@
        @*                        @bind-Value="@Command.ZipCode" *@
        @*                        type="text" *@
        @*                        required *@
        @*                        autocomplete="shipping postal-code" *@
        @*                        disabled="@IsLoading"/> *@
        @* *@
        @*         <FormInvalidFeedback For="@(() => Command.ZipCode)"/> *@
        @*     </FormField> *@
        @* </div> *@
        @* *@
        @* <FormField> *@
        @*     <FormLabel for="address">Address</FormLabel> *@
        @*     <FormInputText id="address" *@
        @*                    @bind-Value="@Command.Address" *@
        @*                    type="text" *@
        @*                    required *@
        @*                    autocomplete="shipping street-address" *@
        @*                    disabled="@IsLoading"/> *@
        @* *@
        @*     <FormDescription Class="w-full flex justify-between"> *@
        @*         Your personal data is protected. *@
        @*     </FormDescription> *@
        @* *@
        @*     <FormInvalidFeedback For="@(() => Command.Address)"/> *@
        @* </FormField> *@

        <Button type="submit" disabled="@IsLoading">
            @if (IsLoading)
            {
                <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
            }
            Register
        </Button>

        <div
            class="relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t after:border-border">
            <span class="relative z-10 bg-background px-2 text-muted-foreground">
                Already have an account?
            </span>
        </div>

        <Button
            Href="@(NavigationManager.GetUriWithQueryParameters("auth/login", new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl }))"
            Variant="outline" disabled="@IsLoading">
            @if (IsLoading)
            {
                <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
            }
            Login
        </Button>
    </AppForm>
</div>

@code {
    [CascadingParameter]
    private TimeZoneInfo BrowserTimeZone { get; set; } = default!;

    [CascadingParameter]
    private CultureInfo BrowserLocale { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool IsLoading { get; set; }

    private RegisterCommand Command { get; set; } = new();

    public async Task RegisterUser(EditContext editContext)
    {
        Command.TimeZoneInfo = BrowserTimeZone;
        Command.CultureInfo = BrowserLocale;

        IsLoading = true;
        var result = await Mediator.Send(Command);
        IsLoading = false;

        if (result is null)
        {
            Toast.ShowError("The email, phone number, or personal Id is already in use by another user.");
            return;
        }

        // TODO registration confirmation
        // RedirectManager.RedirectTo(
        //     "account/registerConfirmation",
        //     new Dictionary<string, object?> { ["email"] = Command.Email, ["returnUrl"] = ReturnUrl });

        await Cookie.SetCookieAsync(JwtGenerator.CookieName, result.Value.Token);
        NavigationManager.NavigateTo(ReturnUrl ?? "/", true);
    }
}