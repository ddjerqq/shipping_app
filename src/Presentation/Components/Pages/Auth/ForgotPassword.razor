@page "/auth/forgot"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Application.Cqrs.Users.Commands
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@using Domain.Aggregates
@using Presentation.Components.Ui.Form

<PageTitle>Forgot password?</PageTitle>

<div class="flex flex-col space-y-2 text-start">
    <h1 class="text-2xl font-semibold tracking-tight">
        Forgot your password?
    </h1>
</div>

<div class="grid gap-6">
    <AppForm @bind-Model="Command" OnValidSubmit="OnValidSubmitAsync" method="POST" FormName="forgot" novalidate class="grid gap-4">
        <FormField>
            <FormLabel for="email">Email</FormLabel>
            <FormInputText id="email"
                           @bind-Value="@Command.Email"
                           placeholder="name@example.com"
                           type="email"
                           required
                           autocomplete="email"
                           disabled="@IsLoading"/>

            <FormInvalidFeedback For="@(() => Command.Email)"/>
        </FormField>

        <Button type="submit" disabled="@IsLoading">
            @if (IsLoading)
            {
                <Blazicon Svg="Loader" class="mr-2 h-4 w-4 animate-spin"/>
            }
            Reset
        </Button>
    </AppForm>
</div>

@code {
    private ForgotPasswordCommand Command { get; set; } = new();
    private bool IsLoading { get; set; }

    private async Task OnValidSubmitAsync()
    {
        // var user = await UserManager.FindByEmailAsync(Command.Email);
        // if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        // {
        //     // Don't reveal that the user does not exist or is not confirmed
        //     RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        // }
        //
        // // For more information on how to enable account confirmation and password reset please
        // // visit https://go.microsoft.com/fwlink/?LinkID=532713
        // var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
        //     new Dictionary<string, object?> { ["code"] = code });
        //
        // await EmailSender.SendPasswordResetLinkAsync(user, Command.Email, HtmlEncoder.Default.Encode(callbackUrl));
        //
        // RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }
}