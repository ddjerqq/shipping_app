@using Application.Cqrs.Users.Commands
@using Application.Services
@using Domain.ValueObjects
@inject ICurrentUserAccessor CurrentUser
@inject IAppDbContext DbContext

<AppForm @bind-Model="Command" OnValidSubmit="AddAddress">
    <InlineFormFieldContainer>
        <FormField>
            <FormLabel for="country">@Locale.country</FormLabel>
            <FormInputText
                id="country"
                @bind-Value="@Command.Country"
                required
                placeholder="@Locale.country"
                autocomplete="address-level2"
                disabled="@IsLoading"/>
            <FormInvalidFeedback For="@(() => Command.Country)"/>
        </FormField>

        <FormField>
            <FormLabel for="state">@Locale.state</FormLabel>
            <input
                id="state"
                class="@FormInputText.BaseClass"
                autocomplete="address-level1"
                placeholder="@Locale.state_unavailable_for_georgia"
                disabled/>
            <FormInvalidFeedback For="@(() => Command.State)"/>
        </FormField>
    </InlineFormFieldContainer>

    <InlineFormFieldContainer>
        <FormField>
            <FormLabel for="city">@Locale.city</FormLabel>
            <FormInputText
                id="city"
                @bind-Value="@Command.City"
                required
                placeholder="@Locale.city"
                autocomplete="address-level2"
                disabled="@IsLoading"/>
            <FormInvalidFeedback For="@(() => Command.City)"/>
        </FormField>

        <FormField>
            <FormLabel for="zip">@Locale.zip_code</FormLabel>
            <FormInputText
                id="zip"
                @bind-Value="@Command.ZipCode"
                type="number"
                step="1"
                min="0"
                max="99999"
                required
                placeholder="@Locale.zip_code"
                autocomplete="postal-code"
                disabled="@IsLoading"/>
            <FormInvalidFeedback For="@(() => Command.ZipCode)"/>
        </FormField>
    </InlineFormFieldContainer>

    <FormField>
        <FormLabel for="street-address">@Locale.street_address</FormLabel>
        <FormInputText
            id="street-address"
            @bind-Value="@Command.Address"
            required
            placeholder="@Locale.street_address"
            autocomplete="street-address"
            disabled="@IsLoading"/>
        <FormInvalidFeedback For="@(() => Command.Address)"/>
    </FormField>

    <Button type="submit" disabled="@IsLoading">
        @if (IsLoading)
        {
            <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
        }
        @Locale.update_address
    </Button>
</AppForm>

@code {
    private AddAddressCommand Command { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Command.User = await CurrentUser.GetCurrentUserAsync(CancellationToken);
        if (Command.User.AddressInfo is FullAddress address)
        {
            Command = new AddAddressCommand
            {
                Country = address.Country,
                State = address.State,
                City = address.City,
                ZipCode = address.ZipCode,
                Address = address.Address,
            };
        }
    }

    private async Task AddAddress()
    {
        await SendCommandAsync(Command);
        ShowSuccess(Locale.address_updated_successfully);
    }
}
