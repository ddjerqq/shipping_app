@using Application.Services
@using Domain.Aggregates
@inject ICurrentUserAccessor CurrentUser
@inject IAppDbContext DbContext

<AppForm @bind-Model="User" OnValidSubmit="UpdateUser">
    <FormField>
        <FormLabel for="full-name">@Locale.full_name</FormLabel>
        <FormInputText id="full-name"
                       Class="capitalize"
                       Value="@User.Username"
                       ValueExpression="@(() => User.Username)"
                       type="text"
                       disabled/>
    </FormField>

    <FormField>
        <FormLabel for="personal-id">@Locale.personal_id</FormLabel>
        <FormInputText id="personal-id"
                       @bind-Value="@User.PersonalId"
                       type="text"/>
    </FormField>

    <FormField>
        <FormLabel for="email">@Locale.email</FormLabel>
        <FormInputText id="email"
                       Value="@User.Email"
                       ValueExpression="@(() => User.Email)"
                       type="text"
                       disabled/>
    </FormField>

    <FormField>
        <FormLabel for="phone">@Locale.phone_number</FormLabel>
        <FormInputText id="phone"
                       Value="@User.PhoneNumber"
                       ValueExpression="@(() => User.PhoneNumber)"
                       type="tel"
                       disabled/>
    </FormField>

    <FormField>
        <FormLabel for="home">@Locale.home_number</FormLabel>
        <FormInputText id="home"
                       Value="@User.HomeNumber"
                       ValueExpression="@(() => User.HomeNumber)"
                       type="tel"
                       disabled/>
    </FormField>

    <Button type="submit" disabled="@IsLoading">
        @if (IsLoading)
        {
            <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
        }
        @Locale.save_changes
    </Button>
</AppForm>

@code {
    private User User { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        User = await CurrentUser.GetCurrentUserAsync(CancellationToken);
    }

    private async Task UpdateUser()
    {
        DbContext.Users.Update(User);
        await DbContext.SaveChangesAsync(CancellationToken);
    }
}
