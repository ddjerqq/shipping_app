@page "/auth/login"
@using Application.Common
@using Application.Cqrs.Users.Commands
@using Domain.Aggregates
@using Domain.ValueObjects
@inject CookieService Cookie

<PageTitle>@Locale.login</PageTitle>
<PageHeader Title="@Locale.welcome_back" Description="@Locale.login_to_your_account"/>

<AuthorizeView>
    <Authorized>
        @{
            var url = context.User.GetRole() switch
            {
                Role.User => "/user_dashboard",
                Role.Staff => "/staff_dashboard",
                Role.Admin => "/admin_dashboard",
                _ => "/",
            };
        }
        <Redirect To="@url"/>
    </Authorized>
</AuthorizeView>

<AppForm @bind-Model="Command" OnValidSubmit="LoginUser">
    <SsoContainer/>

    <div
        class="relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t after:border-border">
        <span class="relative z-10 bg-card px-2 text-muted-foreground">Or continue with email</span>
    </div>

    <FormField>
        <div class="flex items-center">
            <FormLabel for="email">@Locale.email</FormLabel>
            <Link Href="/auth/resend_email_confirmation" Title="@Locale.resend_email_confirmation" class="ml-auto text-sm"/>
        </div>

        <FormInputText id="email"
                       @bind-Value="@Command.Email"
                       placeholder="name@example.com"
                       type="email"
                       required
                       autocomplete="email"
                       disabled="@IsLoading"/>

        <FormInvalidFeedback For="@(() => Command.Email)"/>
    </FormField>

    <FormField>
        <div class="flex items-center">
            <FormLabel for="password">@Locale.password</FormLabel>
            <Link Href="/auth/forgot_password" Title="@Locale.forgot_password" class="ml-auto text-sm"/>
        </div>

        <FormInputText id="password"
                       @bind-Value="@Command.Password"
                       placeholder="..."
                       type="@(ShowPassword ? "text" : "password")"
                       required
                       autocomplete="current-password"
                       disabled="@IsLoading"/>

        <FormInvalidFeedback For="@(() => Command.Password)"/>
    </FormField>

    <FormField>
        <div class="flex flex-row items-center gap-2">
            <Switch id="show" @bind-Value="ShowPassword"/>
            <FormLabel for="show">@Locale.show_password</FormLabel>
        </div>
    </FormField>

    <Button type="submit" disabled="@IsLoading">
        @if (IsLoading)
        {
            <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
        }
        else
        {
            <Blazicon Svg="@Lucide.LogIn"/>
        }
        @Locale.login
    </Button>

    <HorizontalDivider>
        @Locale.dont_have_an_account
    </HorizontalDivider>

    <Button Href="/auth/register" Variant="outline" type="button" class="w-full">
        <Blazicon Svg="@Lucide.ClipboardCheck"/>
        @Locale.signup
    </Button>
</AppForm>

@code {
    [CascadingParameter]
    private TimeZoneInfo BrowserTimeZone { get; set; } = null!;

    [SupplyParameterFromForm]
    private LoginCommand Command { get; set; } = new();

    private bool ShowPassword { get; set; }
    // private Recaptcha RecaptchaComponent { get; set; } = null!;

    public async Task LoginUser()
    {
        // if (!await RecaptchaComponent.IsValid())
        // {
        //     ShowWarning("Please complete captcha before continuing");
        //     return;
        // }

        Command.TimeZoneInfo = BrowserTimeZone;
        (bool IsLockedOut, string? Token, User? User)? result;

        try
        {
            result = await Mediator.Send(Command);
        }
        catch (InvalidOperationException e)
        {
            ShowError(e.Message);
            return;
        }

        switch (result)
        {
            case null:
                ShowError("Invalid credentials.");
                return;
            case (true, _, _):
                NavigationManager.NavigateTo("/auth/lockout");
                return;
            default:
                await Cookie.SetCookieAsync(JwtGenerator.CookieName, result.Value.Token!);
                var url = result.Value.User?.Role switch
                {
                    Role.User => "/user_dashboard",
                    Role.Staff => "/staff_dashboard",
                    Role.Admin => "/admin_dashboard",
                    _ => "/",
                };
                NavigationManager.NavigateTo(url, true);
                break;
        }
    }
}