@page "/auth/reset_password"
@using Application.Cqrs.Users.Commands

<PageTitle>@Locale.reset_password</PageTitle>
<PageHeader Title="@Locale.reset_password"/>

<AppForm @bind-Model="WithTokenCommand" OnValidSubmit="OnValidSubmitAsync">
    <FormField>
        <FormLabel for="new-password">@Locale.new_password</FormLabel>
        <FormInputText id="new-password"
                       @bind-Value="@WithTokenCommand.NewPassword"
                       type="@(ShowPassword ? "text" : "password")"
                       required
                       autocomplete="new-password"
                       disabled="@IsLoading"/>

        <FormInvalidFeedback For="@(() => WithTokenCommand.NewPassword)"/>
    </FormField>

    <FormField>
        <FormLabel for="confirm-new-password">@Locale.confirm_new_password</FormLabel>
        <FormInputText id="confirm-new-password"
                       @bind-Value="@WithTokenCommand.ConfirmNewPassword"
                       type="@(ShowPassword ? "text" : "password")"
                       required
                       autocomplete="new-password"
                       disabled="@IsLoading"/>

        <FormInvalidFeedback For="@(() => WithTokenCommand.ConfirmNewPassword)"/>
    </FormField>

    <FormField>
        <div class="flex flex-row items-center gap-2">
            <FormInputCheckbox id="show" @bind-Value="ShowPassword"/>
            <FormLabel for="show">
                @Locale.show_password
            </FormLabel>
        </div>
    </FormField>

    <Button type="submit" disabled="@IsLoading">
        @if (IsLoading)
        {
            <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
        }
        @Locale.reset
    </Button>
</AppForm>

@code {
    [SupplyParameterFromQuery]
    private string? Token { get; set; }

    private ResetPasswordWithTokenCommand WithTokenCommand { get; set; } = new();
    public bool ShowPassword { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(Token))
        {
            NavigationManager.NavigateTo("auth/invalid_token");
            return;
        }

        WithTokenCommand.Token = Token;
    }

    private async Task OnValidSubmitAsync()
    {
        await SendCommandAsync(WithTokenCommand);

        ShowSuccess(Locale.you_successfully_reset_your_password);
        await Task.Delay(2000);
        NavigationManager.NavigateTo("auth/login");
    }
}