@page "/account/login"

@using Application.Cqrs.Users.Commands
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MediatR
@using Presentation.Components.Ui.Form

@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IMediator Mediator

@attribute [AllowAnonymous]

<PageTitle>Log in</PageTitle>

<div class="flex flex-col space-y-2 text-start">
    <h1 class="text-2xl font-semibold tracking-tight">
        Log in to your account
    </h1>
</div>

<div class="grid gap-6">
    <AppForm @bind-Model="Command" OnValidSubmit="LoginUser" method="POST" FormName="login" novalidate class="grid gap-4">
        <FormField>
            <FormLabel for="email">Email</FormLabel>
            <FormInputText id="email"
                           @bind-Value="@Command.Email"
                           placeholder="name@example.com"
                           type="email"
                           required
                           autocomplete="email"
                           disabled="@IsLoading"/>

            <FormInvalidFeedback For="@(() => Command.Email)"/>
        </FormField>

        <FormField>
            <FormLabel for="password">Password</FormLabel>
            <FormInputText id="password"
                           @bind-Value="@Command.Password"
                           placeholder="Enter password"
                           type="password"
                           required
                           autocomplete="current-password"
                           disabled="@IsLoading"/>

            <FormDescription Class="w-full flex justify-between">
                <a href="/account/forgotPassword" class="underline underline-offset-4 hover:text-primary">
                    Forgot password?
                </a>
                <a href="/account/resendEmailConfirmation" class="underline underline-offset-4 hover:text-primary">
                    Resend email confirmation
                </a>
            </FormDescription>

            <FormInvalidFeedback For="@(() => Command.Password)"/>
        </FormField>

        <FormField Class="flex-row">
            <FormInputCheckbox
                id="remember-me"
                @bind-Value="@Command.RememberMe"
                disabled="@IsLoading"/>

            <FormLabel for="remember-me">
                Remember me
            </FormLabel>
        </FormField>

        <Button type="submit" disabled="@IsLoading">
            @if (IsLoading)
            {
                <Blazicon Svg="Loader" class="mr-2 h-4 w-4 animate-spin"/>
            }
            Login
        </Button>

        <Button
            Href="@(NavigationManager.GetUriWithQueryParameters("account/register", new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl }))"
            Variant="outline" disabled="@IsLoading">
            @if (IsLoading)
            {
                <Blazicon Svg="Loader" class="mr-2 h-4 w-4 animate-spin"/>
            }
            Register
        </Button>

        <span class="text-sm text-red-300 space-y-2 empty:hidden">
            @_statusMessage
        </span>
    </AppForm>
</div>

@code {
    private string? _statusMessage;

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private LoginCommand Command { get; set; } = new();

    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await Mediator.Send(Command);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "account/loginWith2fa",
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Command.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            _statusMessage = "Error: Account locked out.";
            RedirectManager.RedirectTo("account/lockout");
        }
        else
        {
            _statusMessage = "Error: Invalid credentials.";
        }
    }
}