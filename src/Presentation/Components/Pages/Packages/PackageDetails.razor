@page "/packages/{Id}"
@using Application.Services
@using Domain.Aggregates
@using Domain.Common
@using Domain.ValueObjects
@using Microsoft.AspNetCore.Components.Sections
@layout HomeLayout
@inject IAppDbContext DbContext
@inject ICurrentUserAccessor CurrentUser
@inject IFileStore FileStore
@attribute [StreamRendering]

<PageTitle>Package details</PageTitle>
<SectionContent SectionId="HomeLayout.TitleSectionId">Package details</SectionContent>

@if (Package is not null)
{
    <Card class="mx-auto mt-4">
        <Header class="flex-row justify-between">
            <div class="space-y-2">
                <CardTitle class="text-2xl">Package</CardTitle>

                <div class="text-muted-foreground text-sm">
                    <span class="text-base">
                        Status updates:
                    </span>

                    <ul>
                        @foreach (var status in Package.Statuses)
                        {
                            <li>
                                @status.Status.GetDisplayName() on @status.Date.ToString("dd MMM, yyyy")
                                <AuthorizeView Roles="Staff,Admin">
                                    by @(status.Staff?.Username.CapitalizeName() ?? "-")
                                </AuthorizeView>
                            </li>
                        }
                    </ul>
                </div>

                <Tabs Value="@Package.CurrentStatus.Status" class="flex flex-col items-start gap-2">
                    <List>
                        @foreach (var status in Enum.GetValues<PackageStatus>())
                        {
                            <Trigger Value="@status" disabled="@(status != Package.CurrentStatus.Status)">
                                @status.GetDisplayName()
                            </Trigger>
                        }
                    </List>

                    <AuthorizeView Roles="Staff,Admin">
                        @if (Package.CurrentStatus.Status == PackageStatus.Awaiting)
                        {
                            <Button Href="@($"/packages/receive/?code={Package.TrackingCode}&room={Package.Owner.RoomCode}")">
                                <Blazicon Svg="@Lucide.Inbox"/>
                                Receive at warehouse
                            </Button>
                        }

                        @if (Package.CurrentStatus.Status == PackageStatus.InWarehouse)
                        {
                            <Button Href="@($"/races/add_package/?package={Package.Id}")">
                                <Blazicon Svg="@Lucide.Plane"/>
                                Add to race
                            </Button>
                        }

                        @if (Package.CurrentStatus.Status == PackageStatus.InTransit)
                        {
                            <Button Href="@($"/packages/arrived/?package={Package.Id}")">
                                <Blazicon Svg="@Lucide.Inbox"/>
                                Receive at destination
                            </Button>
                        }

                        @if (Package.CurrentStatus.Status == PackageStatus.Arrived)
                        {
                            <Button Href="@($"/packages/deliver/?package={Package.Id}")">
                                <Blazicon Svg="@Lucide.Check"/>
                                Mark delivered
                            </Button>
                        }
                    </AuthorizeView>
                </Tabs>
            </div>

            @if (Package.PictureFileKey is not null)
            {
                <a href="@PictureUrl" target="_blank" class="shrink-0 hidden sm:block">
                    <img src="@PictureUrl" alt="package image" class="aspect-square rounded-xl size-16 sm:size-20 md:size-24"/>
                </a>
            }
        </Header>
        <Content>
            <AppForm @bind-Model="Package" OnValidSubmit="Update" class="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
                <FormField class="col-span-1 sm:col-span-2">
                    <FormLabel for="owner-id">Owner Id</FormLabel>
                    <input id="owner-id"
                           class="@FormInputText.BaseClass"
                           disabled
                           value="@Package.OwnerId"/>
                </FormField>

                <FormField class="col-span-1 sm:col-span-2">
                    <FormLabel for="owner-name">Owner Name</FormLabel>
                    <input id="owner-name"
                           class="@FormInputText.BaseClass"
                           disabled
                           value="@(Package.Owner.Username.CapitalizeName())"/>
                </FormField>

                <FormField>
                    <FormLabel for="tracking-code">Tracking code</FormLabel>
                    <input id="tracking-code"
                           class="@FormInputText.BaseClass"
                           disabled
                           value="@Package.TrackingCode.Value"/>
                </FormField>

                <FormField>
                    <FormLabel for="category">Category</FormLabel>
                    <FormInputEnum id="category"
                                   disabled="@IsLoading"
                                   @bind-Value="Package.Category"
                                   Options="@(Enum.GetValues<Category>())"
                                   required/>
                </FormField>

                <FormField>
                    <FormLabel for="description">Description</FormLabel>
                    <FormInputText id="description"
                                   disabled="@IsLoading"
                                   @bind-Value="@Package.Description"
                                   placeholder="Enter description"
                                   required/>
                    <FormInvalidFeedback For="@(() => Package.Description)"/>
                </FormField>

                <FormField>
                    <FormLabel for="web-address">Website address</FormLabel>
                    <FormInputText id="web-address"
                                   disabled="@IsLoading"
                                   @bind-Value="@Package.WebsiteAddress"
                                   placeholder="Enter web address"
                                   type="url"
                                   required/>
                    <FormInvalidFeedback For="@(() => Package.WebsiteAddress)"/>
                </FormField>

                <FormField>
                    <FormLabel for="retail-price">Retail price</FormLabel>
                    <FormInputMoney Id="retail-price"
                                    disabled="@IsLoading"
                                    @bind-Value="@Package.RetailPrice"
                                    required/>
                    <FormInvalidFeedback For="@(() => Package.RetailPrice)"/>
                </FormField>

                <FormField>
                    <FormLabel for="item-count">Item Count</FormLabel>
                    <InputNumber id="item-count"
                                 disabled="@IsLoading"
                                 class="@FormInputText.BaseClass"
                                 @bind-Value="@Package.ItemCount"
                                 required/>
                    <FormInvalidFeedback For="@(() => Package.ItemCount)"/>
                </FormField>

                <FormField>
                    <FormLabel for="invoice">Invoice</FormLabel>
                    @if (InvoiceUrl is not null)
                    {
                        <Button Href="@InvoiceUrl" type="button" Variant="outline">Download</Button>
                    }
                    else
                    {
                        <InputFile id="invoice"
                                   disabled="@IsLoading"
                                   class="@FormInputText.BaseClass"
                                   accept=".pdf,.doc,.docx"
                                   OnChange="UploadInvoice"/>
                    }
                </FormField>

                @if (Package.PictureFileKey is null)
                {
                    <FormField>
                        <FormLabel for="picture">Picture</FormLabel>
                        <InputFile id="picture"
                                   disabled="@IsLoading"
                                   class="@FormInputText.BaseClass"
                                   accept=".jpg,.jpeg,.png"
                                   OnChange="UploadPicture"/>
                    </FormField>
                }

                <FormField>
                    <FormLabel for="house-delivery">House delivery</FormLabel>
                    <Switch id="house-delivery"
                            disabled="@IsLoading"
                            @bind-Value="@Package.HouseDelivery"/>
                </FormField>

                @if (Package.CurrentStatus.Status >= PackageStatus.InWarehouse)
                {
                    var dimensions = Package.Dimensions!.Value;
                    var dimensionsDisplay = $"{dimensions.X} x {dimensions.Y} x {dimensions.Z} cm";

                    <FormField>
                        <FormLabel for="dimensions">Dimensions</FormLabel>
                        <input id="dimensions"
                               class="@FormInputText.BaseClass"
                               disabled
                               value="@(dimensionsDisplay)"/>
                    </FormField>

                    <FormField>
                        <FormLabel for="weight">Weight (Kg)</FormLabel>
                        <input id="weight"
                               class="@FormInputText.BaseClass"
                               disabled
                               value="@(Package.Weight?.ToString("F1"))"/>
                    </FormField>

                    <FormField>
                        <FormLabel for="shipping-price">Shipping price</FormLabel>
                        <FormInputMoney Id="shipping-price"
                                        disabled
                                        Value="@(new Money("USD", Package.ShippingPrice))"/>
                    </FormField>

                    if (Package.ShouldCalculateVolumetricWeight())
                    {
                        <FormField>
                            <FormLabel for="volumetric-price">Volumetric weight price</FormLabel>
                            <FormInputMoney Id="volumetric-price"
                                            disabled
                                            Value="@(new Money("USD", Package.GetVolumetricWeightPrice()))"/>
                        </FormField>
                    }
                }

                @if (Package.CurrentStatus.Status >= PackageStatus.InTransit)
                {
                    <FormField>
                        <FormLabel for="flight-name">Flight name</FormLabel>
                        <input id="flight-name"
                               class="@FormInputText.BaseClass"
                               disabled
                               value="@Package.Race!.QualifiedName"/>
                    </FormField>

                    <FormField>
                        <FormLabel for="copy-flight-name">Copy flight name</FormLabel>
                        <CopyButton Variant="outline" Content="@Package.Race!.QualifiedName">
                            Copy flight name
                        </CopyButton>
                    </FormField>

                    <FormField>
                        <FormLabel for="start">Takeoff</FormLabel>
                        <input id="start"
                               class="@FormInputText.BaseClass"
                               disabled
                               value="@Package.Race!.Start.ToString("dd, MMM, yyyy")"/>
                    </FormField>

                    <FormField>
                        <FormLabel for="arrival">Arrival</FormLabel>
                        <input id="arrival"
                               class="@FormInputText.BaseClass"
                               disabled
                               value="@Package.Race!.Arrival.ToString("dd MMM, yyyy")"/>
                    </FormField>
                }

                <Button type="submit" class="col-span-1 sm:col-span-2 lg:col-span-4">
                    Save
                </Button>
            </AppForm>
        </Content>
        <Footer class="text-sm text-muted-foreground">
            Package ID: @Id
        </Footer>
    </Card>
}

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    private PackageId? PackageId => Domain.Aggregates.PackageId.TryParse(Id, null, out var id) ? id : null;
    private Package? Package { get; set; }
    private string? InvoiceUrl { get; set; }
    private string? PictureUrl { get; set; }

    private IBrowserFile? InvoiceFile { get; set; }
    private IBrowserFile? PictureFile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Package = await DbContext.Packages
            .FindAsync([PackageId], CancellationToken);

        if (Package is null || Package.OwnerId != CurrentUser.Id)
        {
            if (CurrentUser.Role is Role.User)
            {
                NavigationManager.NavigateTo("/404");
                return;
            }
        }

        if (Package?.InvoiceFileKey is not null)
            InvoiceUrl = await FileStore.GetPresignedFileUrlAsync(Package.InvoiceFileKey, CancellationToken);

        if (Package?.PictureFileKey is not null)
            PictureUrl = await FileStore.GetPresignedFileUrlAsync(Package.PictureFileKey, CancellationToken);
    }

    private void UploadInvoice(InputFileChangeEventArgs args)
    {
        if (args.FileCount > 1)
        {
            ShowError("Please attach only one file");
            return;
        }

        var file = args.File;
        if (file.Size >= 1_000_000)
        {
            ShowError("The file is too big");
            return;
        }

        if (Path.GetExtension(file.Name) is not ".pdf")
        {
            ShowError("The file must be a .pdf format");
            return;
        }

        InvoiceFile = file;
    }

    private void UploadPicture(InputFileChangeEventArgs args)
    {
        if (args.FileCount > 1)
        {
            ShowError("Please attach only one file");
            return;
        }

        var file = args.File;
        if (file.Size >= 1_000_000)
        {
            ShowError("The file is too big");
            return;
        }

        if (Path.GetExtension(file.Name) is not (".jpg" or ".jpeg" or ".png"))
        {
            ShowError("The file must be a .jpg, .jpeg or .png format");
            return;
        }

        PictureFile = file;
    }

    private async Task Update()
    {
        if (InvoiceFile is not null)
        {
            await using var fileStream = InvoiceFile.OpenReadStream(cancellationToken: CancellationToken);
            Package!.InvoiceFileKey = await FileStore.CreateFileAsync(fileStream, Path.GetExtension(InvoiceFile.Name), CancellationToken);
            ShowSuccess("Invoice file uploaded successfully");
        }

        if (PictureFile is not null)
        {
            await using var fileStream = PictureFile.OpenReadStream(cancellationToken: CancellationToken);
            Package!.PictureFileKey = await FileStore.CreateFileAsync(fileStream, Path.GetExtension(PictureFile.Name), CancellationToken);
            ShowSuccess("Picture file uploaded successfully");
        }

        await DbContext.SaveChangesAsync(CancellationToken);
        ShowSuccess("Package updated successfully");
    }
}