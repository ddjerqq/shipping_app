@page "/packages/{Id}"
@using Application.Cqrs.Packages.Commands
@using Application.Services
@using Blazored.Modal.Services
@using Domain.Aggregates
@using Domain.Common
@using Microsoft.AspNetCore.Components.Rendering
@using Domain.ValueObjects
@layout HomeLayout
@inject IAppDbContext DbContext
@inject ICurrentUserAccessor CurrentUser
@inject IFileStore FileStore
@inject IModalService Modal
@attribute [StreamRendering]
@attribute [AllowAnonymous]

<PageTitle>@Locale.package_details</PageTitle>

@if (Package is not null)
{
    <Card>
        <Header class="flex-row justify-between">
            <div class="space-y-2">
                <CardTitle>@Locale.package_details</CardTitle>

                <div class="text-muted-foreground text-sm">
                    <span class="text-base">@Locale.status_updates</span>

                    <ul>
                        @foreach (var status in Package.Statuses)
                        {
                            <li>
                                @status.Status.GetDisplayName()
                                on
                                <time class="font-semibold">
                                    @CurrentUser.ConvertTimeToUserTime(status.Date).ToString("dd MMM, yyyy @ hh:mm:ss tt UTCzzz")
                                </time>
                                <AuthorizeView Roles="Staff,Admin">
                                    @if (status.Staff?.Username.CapitalizeName() is { } username)
                                    {
                                        <b>by @username</b>
                                    }
                                </AuthorizeView>
                            </li>
                        }
                    </ul>
                </div>

                <div class="w-full flex flex-col items-start gap-2">
                    <Tabs Value="@Package.CurrentStatus.Status" class="hidden sm:block">
                        <List>
                            @foreach (var status in Enum.GetValues<PackageStatus>())
                            {
                                <Trigger Value="@status" disabled="@(status != Package.CurrentStatus.Status)">
                                    @status.GetDisplayName()
                                </Trigger>
                            }
                        </List>
                    </Tabs>

                    <Tabs Value="@Package.CurrentStatus.Status" class="block sm:hidden">
                        <List>
                            <Trigger Value="@Package.CurrentStatus.Status">
                                @Package.CurrentStatus.Status.GetDisplayName()
                            </Trigger>
                        </List>
                    </Tabs>

                    @if (!Package.IsProhibited)
                    {
                        <AuthorizeView Roles="User">
                            @if (Package.CurrentStatus.Status == PackageStatus.Arrived && !Package.IsPaid)
                            {
                                <Button Variant="default" @onclick="@PayForShipping">
                                    <Blazicon Svg="@Lucide.DollarSign"/>
                                    @Locale.pay_for_shipping
                                </Button>
                            }
                        </AuthorizeView>

                        <AuthorizeView Roles="Staff,Admin">
                            @if (Package.CurrentStatus.Status == PackageStatus.Awaiting)
                            {
                                <Button Href="@($"/packages/receive/?code={Package.TrackingCode}&room={Package.Owner.RoomCode}")">
                                    <Blazicon Svg="@Lucide.Inbox"/>
                                    @Locale.receive_at_warehouse
                                </Button>
                            }

                            @if (Package.CurrentStatus.Status == PackageStatus.InWarehouse)
                            {
                                <div>
                                    <Button Href="@($"/races/add_package/?package_id={Package.Id}")">
                                        <Blazicon Svg="@Lucide.Plane"/>
                                        @Locale.add_to_race
                                    </Button>

                                    <Button Href="@($"/packages/label/{Package.Id}")" Variant="outline">
                                        <Blazicon Svg="@Lucide.Ticket"/>
                                        @Locale.print_label
                                    </Button>
                                </div>
                            }

                            @if (Package.CurrentStatus.Status == PackageStatus.InTransit)
                            {
                                <Button Href="@($"/packages/arrived/?code={Package.TrackingCode}")">
                                    <Blazicon Svg="@Lucide.Inbox"/>
                                    @Locale.receive_at_destination
                                </Button>
                            }

                            @if (Package.CurrentStatus.Status == PackageStatus.Arrived)
                            {
                                if (Package.IsPaid)
                                {
                                    <Button Href="@($"/packages/deliver/?code={Package.TrackingCode}")" disabled>
                                        <Blazicon Svg="@Lucide.Check"/>
                                        @Locale.mark_package_as_delivered_to_user
                                    </Button>
                                }
                                else
                                {
                                    <p class="text-sm text-red-700 dark:text-red-400">
                                        @Locale.this_package_has_not_been_paid_for_cant_deliver
                                    </p>
                                }
                            }
                        </AuthorizeView>
                    }
                    else
                    {
                        <p class="text-sm text-red-700 dark:text-red-400">
                            @Locale.this_package_contains_prohibited_items
                        </p>
                    }
                </div>
            </div>

            @if (Package.PictureFileKey is not null)
            {
                <a href="@PictureUrl" target="_blank" class="shrink-0 hidden sm:block">
                    <img src="@PictureUrl" alt="package image" class="aspect-square rounded-xl size-16 sm:size-20 md:size-24"/>
                </a>
            }
        </Header>
        <Content>
            <CascadingValue Name="@nameof(CanSeeSensitiveData)" Value="@CanSeeSensitiveData" IsFixed="true">
                <AppForm @bind-Model="Package" OnValidSubmit="Update" class="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
                    @if (Package.Sender is not null)
                    {
                        <FormField>
                            <FormLabel for="sender-name">@Locale.sender</FormLabel>
                            <input id="sender-name"
                                   class="@FormInputText.BaseClass"
                                   disabled
                                   value="@(Package.Sender.Username.CapitalizeName())"/>
                        </FormField>
                    }
                    <FormField>
                        <FormLabel for="receiver-name">@Locale.receiver</FormLabel>
                        <input id="receiver-name"
                               class="@FormInputText.BaseClass"
                               disabled
                               value="@(Package.Owner.Username.CapitalizeName())"/>
                    </FormField>

                    @if (Package.PricePerKg is not null)
                    {
                        <FormField>
                            <FormLabel for="price-per-kg">@Locale.price_per KG</FormLabel>
                            <FormInputMoney Id="price-per-kg"
                                            disabled
                                            Value="@Package.PricePerKg!.Value"/>
                        </FormField>
                    }

                    <FormField>
                        <FormLabel for="tracking-code">@Locale.tracking_code</FormLabel>
                        <input id="tracking-code"
                               class="@FormInputText.BaseClass"
                               disabled
                               value="@Package.TrackingCode.Value"/>
                    </FormField>

                    <FormField>
                        <FormLabel for="category">@Locale.category</FormLabel>
                        <FormInputEnum id="category"
                                       disabled="@DisableForm"
                                       @bind-Value="Package.Category"
                                       Options="@(Enum.GetValues<Category>())"
                                       required/>
                    </FormField>

                    <FormField>
                        <FormLabel for="description">@Locale.package_description</FormLabel>
                        <FormInputText id="description"
                                       disabled="@DisableForm"
                                       @bind-Value="@Package.Description"
                                       placeholder="Enter description"
                                       required/>
                        <FormInvalidFeedback For="@(() => Package.Description)"/>
                    </FormField>

                    <FormField>
                        <FormLabel for="web-address">@Locale.website_address</FormLabel>
                        <FormInputText id="web-address"
                                       disabled="@DisableForm"
                                       @bind-Value="@Package.WebsiteAddress"
                                       placeholder="Enter web address"
                                       type="url"
                                       required/>
                        <FormInvalidFeedback For="@(() => Package.WebsiteAddress)"/>
                    </FormField>

                    <PackageDetailsProtectedField>
                        <FormField>
                            <FormLabel for="retail-price">@Locale.retail_price</FormLabel>
                            <FormInputMoney Id="retail-price"
                                            disabled="@DisableForm"
                                            @bind-Value="@Package.RetailPrice"
                                            required/>
                            <FormInvalidFeedback For="@(() => Package.RetailPrice)"/>
                        </FormField>
                    </PackageDetailsProtectedField>

                    <FormField>
                        <FormLabel for="item-count">@Locale.item_count</FormLabel>
                        <InputNumber id="item-count"
                                     disabled="@DisableForm"
                                     class="@FormInputText.BaseClass"
                                     @bind-Value="@Package.ItemCount"
                                     required/>
                        <FormInvalidFeedback For="@(() => Package.ItemCount)"/>
                    </FormField>

                    <PackageDetailsProtectedField>
                        <FormField>
                            <FormLabel for="invoice">@Locale.invoice</FormLabel>
                            @if (InvoiceUrl is not null)
                            {
                                <Button Href="@InvoiceUrl" type="button" Variant="outline">@Locale.download</Button>
                            }
                            else
                            {
                                <InputFile id="invoice"
                                           disabled="@DisableForm"
                                           class="@FormInputText.BaseClass"
                                           accept=".pdf,.doc,.docx"
                                           OnChange="UploadInvoice"/>
                            }
                        </FormField>
                    </PackageDetailsProtectedField>

                    <PackageDetailsProtectedField>
                        @if (Package.PictureFileKey is null)
                        {
                            <FormField>
                                <FormLabel for="picture">@Locale.picture</FormLabel>
                                <InputFile id="picture"
                                           disabled="@DisableForm"
                                           class="@FormInputText.BaseClass"
                                           accept=".jpg,.jpeg,.png"
                                           OnChange="UploadPicture"/>
                            </FormField>
                        }
                    </PackageDetailsProtectedField>

                    <PackageDetailsProtectedField>
                        <FormField>
                            <FormLabel for="house-delivery">@Locale.house_delivery</FormLabel>
                            <Switch id="house-delivery"
                                    disabled="@DisableForm"
                                    @bind-Value="@Package.HouseDelivery"/>
                        </FormField>
                    </PackageDetailsProtectedField>

                    @if (Package.CurrentStatus.Status >= PackageStatus.InWarehouse)
                    {
                        var dimensions = Package.Dimensions!.Value;
                        var dimensionsDisplay = $"{dimensions.X} x {dimensions.Y} x {dimensions.Z} cm";

                        <FormField>
                            <FormLabel for="dimensions">@Locale.dimensions</FormLabel>
                            <input id="dimensions"
                                   class="@FormInputText.BaseClass"
                                   disabled
                                   value="@(dimensionsDisplay)"/>
                        </FormField>

                        <FormField>
                            <FormLabel for="weight">@Locale.weight (Kg)</FormLabel>
                            <input id="weight"
                                   class="@FormInputText.BaseClass"
                                   disabled
                                   value="@(((float?)Package.Weight / 1000)?.ToString("F1"))"/>
                        </FormField>

                        <FormField>
                            <FormLabel for="shipping-price">@Locale.shipping_price</FormLabel>
                            <FormInputMoney Id="shipping-price"
                                            disabled
                                            Value="@(Package.Price!.TotalPrice)"/>
                        </FormField>

                        if (Package.Price!.IsCalculatingVolumetricWeight)
                        {
                            <FormField>
                                <FormLabel for="volumetric-price">@Locale.volumetric_price</FormLabel>
                                <FormInputMoney Id="volumetric-price"
                                                disabled
                                                Value="@(Package.Price.VolumetricWeightPrice)"/>
                            </FormField>
                        }
                    }

                    @if (Package.CurrentStatus.Status >= PackageStatus.InTransit)
                    {
                        <FormField>
                            <FormLabel for="flight-name">@Locale.race_name</FormLabel>
                            <input id="flight-name"
                                   class="@FormInputText.BaseClass"
                                   disabled
                                   value="@Package.Race!.QualifiedName"/>
                        </FormField>

                        <PackageDetailsProtectedField>
                            <FormField>
                                <FormLabel for="copy-flight-name">@Locale.copy @Locale.race_name</FormLabel>
                                <CopyButton Variant="outline" Content="@Package.Race!.QualifiedName">
                                    @Package.Race!.QualifiedName
                                </CopyButton>
                            </FormField>
                        </PackageDetailsProtectedField>

                        <FormField>
                            <FormLabel for="start">@Locale.takeoff</FormLabel>
                            <input id="start"
                                   class="@FormInputText.BaseClass"
                                   disabled
                                   value="@Package.Race!.Start.ToString("dd, MMM, yyyy")"/>
                        </FormField>

                        <FormField>
                            <FormLabel for="arrival">@Locale.landing</FormLabel>
                            <input id="arrival"
                                   class="@FormInputText.BaseClass"
                                   disabled
                                   value="@Package.Race!.Arrival.ToString("dd MMM, yyyy")"/>
                        </FormField>
                    }

                    <PackageDetailsProtectedField>
                        @if (Package.CurrentStatus.Status >= PackageStatus.Arrived)
                        {
                            <FormField>
                                <FormLabel for="is-paid">@Locale.is_paid?</FormLabel>
                                <Switch id="is-paid"
                                        disabled
                                        Value="@Package.IsPaid"
                                        ValueExpression="@(() => Package.IsPaid)"/>
                            </FormField>
                        }
                    </PackageDetailsProtectedField>

                    @if (!DisableForm)
                    {
                        <Button type="submit" class="col-span-1 sm:col-span-2 lg:col-span-4">
                            @Locale.save
                        </Button>
                    }
                </AppForm>
            </CascadingValue>
        </Content>
        <Footer class="text-sm text-muted-foreground">
            @if (!CanSeeSensitiveData)
            {
                <p>To view the full package details:
                    <Link Href="/auth/login" Title="login."/>
                </p>
            }

            <p>@Id</p>
        </Footer>
    </Card>
}

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    private PackageId? PackageId => Domain.Aggregates.PackageId.TryParse(Id, null, out var id) ? id : null;
    private Package? Package { get; set; }
    private string? InvoiceUrl { get; set; }
    private string? PictureUrl { get; set; }

    private IBrowserFile? InvoiceFile { get; set; }
    private IBrowserFile? PictureFile { get; set; }

    private bool CanSeeSensitiveData =>
        CurrentUser is not null &&
        (CurrentUser.Role is Role.Staff or Role.Admin || CurrentUser.Id == Package?.OwnerId);

    private bool DisableForm => IsLoading || Package?.IsProhibited is true || Package?.CurrentStatus.Status >= PackageStatus.Arrived || !CanSeeSensitiveData;

    protected override async Task OnInitializedAsync()
    {
        Package = await DbContext.Packages
            .FindAsync([PackageId], CancellationToken);

        if (Package is null)
        {
            NavigationManager.NavigateTo("/404");
            return;
        }

        if (Package?.InvoiceFileKey is not null)
            InvoiceUrl = await FileStore.GetPresignedFileUrlAsync(Package.InvoiceFileKey, CancellationToken);

        if (Package?.PictureFileKey is not null)
            PictureUrl = await FileStore.GetPresignedFileUrlAsync(Package.PictureFileKey, CancellationToken);
    }

    private void UploadInvoice(InputFileChangeEventArgs args)
    {
        if (args.FileCount > 1)
        {
            ShowError("Please attach only one file");
            return;
        }

        var file = args.File;
        if (file.Size >= 1_000_000)
        {
            ShowError("The file is too big");
            return;
        }

        if (Path.GetExtension(file.Name) is not ".pdf")
        {
            ShowError("The file must be a .pdf format");
            return;
        }

        InvoiceFile = file;
    }

    private void UploadPicture(InputFileChangeEventArgs args)
    {
        if (args.FileCount > 1)
        {
            ShowError("Please attach only one file");
            return;
        }

        var file = args.File;
        if (file.Size >= 1_000_000)
        {
            ShowError("The file is too big");
            return;
        }

        if (Path.GetExtension(file.Name) is not (".jpg" or ".jpeg" or ".png"))
        {
            ShowError("The file must be a .jpg, .jpeg or .png format");
            return;
        }

        PictureFile = file;
    }

    private async Task Update()
    {
        if (Package?.CurrentStatus.Status >= PackageStatus.Arrived)
        {
            ShowError("Cannot update status for this package, as it has already arrived at the destination!");
            return;
        }

        if (InvoiceFile is not null)
        {
            await using var fileStream = InvoiceFile.OpenReadStream(cancellationToken: CancellationToken);
            Package!.InvoiceFileKey = await FileStore.CreateFileAsync(fileStream, Path.GetExtension(InvoiceFile.Name), CancellationToken);
            ShowSuccess("Invoice file uploaded successfully");
        }

        if (PictureFile is not null)
        {
            await using var fileStream = PictureFile.OpenReadStream(cancellationToken: CancellationToken);
            Package!.PictureFileKey = await FileStore.CreateFileAsync(fileStream, Path.GetExtension(PictureFile.Name), CancellationToken);
            ShowSuccess("Picture file uploaded successfully");
        }

        await DbContext.SaveChangesAsync(CancellationToken);
        ShowSuccess("Package updated successfully");
    }

    private async Task PayForShipping()
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmPaymentForPackage.Package), Package);

        var modal = Modal.Show<ConfirmPaymentForPackage>(parameters);
        var result = await modal.Result;

        if (result.Cancelled)
            return;

        var command = new PayForShippingCommand(Package!.Id);
        await SendCommandAsync(command);
        ShowSuccess("You have successfully paid for this package's shipping");
    }
}