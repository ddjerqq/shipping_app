@page "/packages/new"
@using Application.Cqrs.Packages.Commands
@using Application.Services
@using Domain.Aggregates
@using Domain.Common
@using Microsoft.EntityFrameworkCore
@using Domain.ValueObjects

@inject IFileStore FileStore
@inject IAppDbContext DbContext
@inject ICurrentUserAccessor CurrentUser

<PageTitle>Declare new package</PageTitle>
<PageHeader Title="Declare new package"/>

<Card>
    <Header>
        <CardTitle>Declare new package</CardTitle>
        <Description>Please pre-declare your packages so that there aren't any delays when shipping it</Description>
    </Header>
    <Content>
        <AppForm @bind-Model="Command" OnValidSubmit="OnValidSubmit">
            <AuthorizeView Roles="Staff,Admin">
                <FormField>
                    <FormLabel for="owner-id">Owner Id</FormLabel>

                    <select id="owner-id"
                            @onchange="@(args => Command.Owner = Users.FirstOrDefault(u => u.Id == UserId.Parse(args.Value?.ToString()!))!)"
                            class="@FormInputText.BaseClass"
                            required>
                        <option value="null" disabled selected>-- select option --</option>

                        @foreach (var user in Users)
                        {
                            <option value="@user.Id">@(user.Username.CapitalizeName())</option>
                        }
                    </select>
                </FormField>
            </AuthorizeView>

            <InlineFormFieldContainer>
                <FormField>
                    <FormLabel for="tracking-code">Tracking code</FormLabel>
                    <FormInputText id="tracking-code"
                                   disabled="@IsLoading"
                                   @bind-Value="@Command.TrackingCode"
                                   placeholder="Enter tracking code"
                                   required/>

                    <FormInvalidFeedback For="@(() => Command.TrackingCode)"/>
                </FormField>

                <FormField>
                    <FormLabel for="category">Category</FormLabel>
                    <FormInputEnum id="category"
                                   disabled="@IsLoading"
                                   @bind-Value="Command.Category"
                                   Options="@(Enum.GetValues<Category>())"
                                   required/>
                    <FormInvalidFeedback For="@(() => Command.Category)"/>
                </FormField>
            </InlineFormFieldContainer>

            <InlineFormFieldContainer>
                <FormField>
                    <FormLabel for="description">Description</FormLabel>
                    <FormInputText id="description"
                                   disabled="@IsLoading"
                                   @bind-Value="@Command.Description"
                                   placeholder="Enter description"
                                   required/>
                    <FormInvalidFeedback For="@(() => Command.Description)"/>
                </FormField>

                <FormField>
                    <FormLabel for="web-address">Website address</FormLabel>
                    <FormInputText id="web-address"
                                   disabled="@IsLoading"
                                   @bind-Value="@Command.WebsiteAddress"
                                   placeholder="Enter web address"
                                   type="url"
                                   required/>
                    <FormInvalidFeedback For="@(() => Command.WebsiteAddress)"/>
                </FormField>
            </InlineFormFieldContainer>

            <InlineFormFieldContainer>
                <FormField>
                    <FormLabel for="retail-price">Retail price</FormLabel>
                    <FormInputMoney Id="retail-price"
                                    disabled="@IsLoading"
                                    @bind-Value="@Command.RetailPrice"
                                    required/>
                    <FormInvalidFeedback For="@(() => Command.RetailPrice)"/>
                </FormField>

                <FormField>
                    <FormLabel for="item-count">Item Count</FormLabel>
                    <InputNumber id="item-count"
                                 disabled="@IsLoading"
                                 class="@FormInputText.BaseClass"
                                 @bind-Value="@Command.ItemCount"
                                 required/>
                    <FormInvalidFeedback For="@(() => Command.ItemCount)"/>
                </FormField>
            </InlineFormFieldContainer>

            <InlineFormFieldContainer>
                <FormField>
                    <FormLabel for="invoice">Invoice</FormLabel>
                    <InputFile id="invoice"
                               disabled="@IsLoading"
                               class="@FormInputText.BaseClass"
                               accept=".pdf,.doc,.docx"
                               OnChange="UploadInvoice"/>
                    <FormInvalidFeedback For="@(() => Command.InvoiceFile)"/>
                </FormField>

                <FormField>
                    <FormLabel for="picture">Picture</FormLabel>
                    <InputFile id="picture"
                               disabled="@IsLoading"
                               class="@FormInputText.BaseClass"
                               accept=".jpg,.jpeg,.png"
                               OnChange="UploadPicture"/>
                    <FormInvalidFeedback For="@(() => Command.PictureFile)"/>
                </FormField>
            </InlineFormFieldContainer>

            <FormField>
                <FormLabel for="house-delivery">House delivery</FormLabel>
                <Switch id="house-delivery"
                        disabled="@IsLoading"
                        @bind-Value="@Command.HouseDelivery"/>
                <FormInvalidFeedback For="@(() => Command.HouseDelivery)"/>
            </FormField>

            <Button type="submit" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
                }
                Declare
            </Button>
        </AppForm>
    </Content>
</Card>

@code {
    private CreatePackageCommand Command { get; set; } = new();
    private IEnumerable<User> Users { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.Role is Role.Staff or Role.Admin)
        {
            Users = await DbContext.Users
                .Where(user => user.Role == Role.User)
                .ToListAsync(CancellationToken);
        }
        else
        {
            Command.Owner = await CurrentUser.GetCurrentUserAsync(CancellationToken);
        }
    }

    private async Task OnValidSubmit()
    {
        await SendCommandAsync(Command);
        ShowSuccess("You successfully declared your package!");
        Command = new CreatePackageCommand();
    }

    private void UploadInvoice(InputFileChangeEventArgs args)
    {
        if (args.FileCount > 1)
        {
            ShowError("Please attach only one file");
            return;
        }

        Command.InvoiceFile = args.File;
    }

    private void UploadPicture(InputFileChangeEventArgs args)
    {
        if (args.FileCount > 1)
        {
            ShowError("Please attach only one file");
            return;
        }

        Command.PictureFile = args.File;
    }
}