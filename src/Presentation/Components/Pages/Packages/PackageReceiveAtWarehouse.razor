@page "/packages/receive"
@attribute [Authorize(Roles = "Staff,Admin")]
@using Application.Cqrs.Packages.Commands

<PageTitle>Receive Package at warehouse</PageTitle>

<Card>
    <Header>
        <CardTitle>Receive Package at warehouse</CardTitle>
        <Description>When you receive a package at the warehouse, declare them here.</Description>
    </Header>
    <Content>
        <AppForm @bind-Model="Command" OnValidSubmit="OnValidSubmit">
            <InlineFormFieldContainer>
                <FormField>
                    <FormLabel for="tracking-code">Tracking code</FormLabel>
                    <FormInputText id="tracking-code"
                                   disabled="@(ParametersSuppliedFromQuery || IsLoading)"
                                   @bind-Value="@Command.TrackingCode"
                                   placeholder="Enter tracking code"
                                   required/>
                    <FormDescription>The tracking code, as present on the package</FormDescription>
                    <FormInvalidFeedback For="@(() => Command.TrackingCode)"/>
                </FormField>

                <FormField>
                    <FormLabel for="room-code">Address 2 (Room code)</FormLabel>
                    <FormInputText id="room-code"
                                   disabled="@(ParametersSuppliedFromQuery || IsLoading)"
                                   @bind-Value="Command.Address2"
                                   placeholder="Enter room code (address 2)"/>
                    <FormDescription>Address 2, as present on the package</FormDescription>
                    <FormInvalidFeedback For="@(() => Command.Address2)"/>
                </FormField>
            </InlineFormFieldContainer>

            <InlineFormFieldContainer class="mt-2 sm:grid-cols-3">
                <FormField>
                    <FormLabel for="y">Width (cm)</FormLabel>
                    <InputNumber id="y"
                                 class="@FormInputText.BaseClass"
                                 @bind-Value="@Command.Width"
                                 type="number"
                                 step="0.1"
                                 min="0"
                                 max="100"
                                 disabled="@IsLoading"/>
                    <FormInvalidFeedback For="@(() => Command.Width)"/>
                </FormField>

                <FormField>
                    <FormLabel for="z">Height (cm)</FormLabel>
                    <InputNumber id="z"
                                 class="@FormInputText.BaseClass"
                                 @bind-Value="@Command.Height"
                                 type="number"
                                 step="0.1"
                                 min="0"
                                 max="100"
                                 disabled="@IsLoading"/>
                    <FormInvalidFeedback For="@(() => Command.Height)"/>
                </FormField>

                <FormField>
                    <FormLabel for="x">Length (cm)</FormLabel>
                    <InputNumber id="x"
                                 class="@FormInputText.BaseClass"
                                 @bind-Value="@Command.Length"
                                 type="number"
                                 step="0.1"
                                 min="0"
                                 max="100"
                                 disabled="@IsLoading"/>
                    <FormInvalidFeedback For="@(() => Command.Length)"/>
                </FormField>
            </InlineFormFieldContainer>

            <FormField>
                <FormLabel for="weight">Weight (Kg)</FormLabel>
                <InputNumber id="weight"
                             class="@FormInputText.BaseClass"
                             @bind-Value="@Command.WeightKiloGrams"
                             type="number"
                             min="0"
                             step="0.1"
                             max="100"
                             required
                             disabled="@IsLoading"/>
                <FormDescription class="text-xs">
                    Please keep in mind, the weight will get rounded up to the nearest 100 grams.
                </FormDescription>
                <FormInvalidFeedback For="@(() => Command.WeightKiloGrams)"/>
            </FormField>

            <Button type="submit" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
                }
                Declare
            </Button>
        </AppForm>
    </Content>
</Card>

@code {
    [SupplyParameterFromQuery(Name = "code")]
    public string? TrackingCode { get; set; }

    [SupplyParameterFromQuery(Name = "room")]
    public string? RoomCode { get; set; }

    private bool ParametersSuppliedFromQuery => !string.IsNullOrWhiteSpace(TrackingCode) && !string.IsNullOrWhiteSpace(RoomCode);

    private ReceivePackageAtWarehouseCommand Command { get; set; } = new();

    protected override void OnParametersSet()
    {
        Command = new ReceivePackageAtWarehouseCommand
        {
            TrackingCode = TrackingCode ?? string.Empty,
            Address2 = RoomCode ?? string.Empty,
        };
    }

    private async Task OnValidSubmit()
    {
        var result = await SendCommandAsync(Command);

        switch (result)
        {
            case ReceivePackageAtWarehouseResult.Success:
                ShowSuccess("The package is saved in the system!");
                // return the user to the all packages page after a delay
                if (ParametersSuppliedFromQuery)
                {
                    await Task.Delay(1000, CancellationToken);
                    NavigationManager.NavigateTo("/packages/all?status=Awaiting");
                }
                break;
            case ReceivePackageAtWarehouseResult.NoOwnerFound:
                ShowWarning("No owner found for this package. The Package has been added to your name. The user will have to ask for the package later.");
                break;
            case ReceivePackageAtWarehouseResult.PackageAlreadyInWarehouse:
                ShowError("The package is already added.");
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        Command = new();
    }
}
