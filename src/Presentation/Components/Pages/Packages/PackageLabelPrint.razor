@page "/packages/label/{Id}"
@using Application.Services
@using Domain.ValueObjects
@using Microsoft.EntityFrameworkCore
@using Domain.Common
@using Presentation.Services
@using Domain.Aggregates
@attribute [Authorize(Roles = "Staff,Admin")]
@attribute [StreamRendering]
@inject IAppDbContext DbContext
@inject ICurrentUserAccessor CurrentUser
@inject HtmlSectionPrinterService Printer

<PageTitle>
    sangoway_label_@Package?.TrackingCode
</PageTitle>

@if (Package is not null)
{
    <Card id="label" class="max-w-xl flex flex-col text-center border-dashed border-black font-mono font-bold">
        <Header class="border-b border-dashed border-black text-lg">
            <CardTitle class="text-2xl">SanGoWay</CardTitle>
        </Header>
        <Content class="w-full flex flex-col items-center p-0">
            <div class="@($"w-full grid {(Package.Sender is not null ? "grid-cols-2" : "grid-cols-1")}")">
                @if (Package.Sender is not null)
                {
                    <div class="w-full text-start border border-dashed border-black text-sm p-2">
                        <h2 class="text-xl font-bold">Sender</h2>
                        <div class="flex gap-1 items-center">
                            <Blazicon Svg="@Lucide.User"/>
                            <span class="text-wrap">@Package.Sender.Username.CapitalizeName()</span>
                        </div>
                        <div class="flex gap-1 items-center">
                            <Blazicon Svg="@Lucide.Phone"/>
                            <span class="text-wrap">@Package.Sender.PhoneNumber</span>
                        </div>
                        <div class="flex gap-1 items-center">
                            <Blazicon Svg="@Lucide.Mail"/>
                            <span class="text-wrap">@Package.Sender.Email</span>
                        </div>
                        <div class="flex gap-1 items-center">
                            <Blazicon Svg="@Lucide.MapPinHouse"/>
                            <span class="text-wrap">@Package.Sender.AddressInfo.AddressToString()</span>
                        </div>
                        <div class="flex gap-1 items-center">
                            <Blazicon Svg="@Lucide.DoorOpen"/>
                            <span class="text-wrap">@Package.Sender.RoomCode</span>
                        </div>
                    </div>
                }

                <div class="w-full text-start border border-dashed border-black text-sm p-2">
                    <h2 class="text-xl font-bold">Receiver</h2>
                    <div class="flex gap-1 items-center">
                        <Blazicon Svg="@Lucide.User"/>
                        <span class="text-wrap">@Package.Owner.Username.CapitalizeName()</span>
                    </div>
                    <div class="flex gap-1 items-center">
                        <Blazicon Svg="@Lucide.Phone"/>
                        <span class="text-wrap">@Package.Owner.PhoneNumber</span>
                    </div>
                    <div class="flex gap-1 items-center">
                        <Blazicon Svg="@Lucide.Mail"/>
                        <span class="text-wrap">@Package.Owner.Email</span>
                    </div>
                    <div class="flex gap-1 items-center">
                        <Blazicon Svg="@Lucide.MapPinHouse"/>
                        <span class="text-wrap">@Package.Owner.AddressInfo.AddressToString()</span>
                    </div>
                    <div class="flex gap-1 items-center">
                        <Blazicon Svg="@Lucide.DoorOpen"/>
                        <span class="text-wrap">@Package.Owner.RoomCode</span>
                    </div>
                </div>
            </div>

            <div class="p-6 border border-dashed border-black">
                <img src="@($"https://barcodeapi.org/api/39/{Package.TrackingCode.Value.ToUpperInvariant()}?dpi=600")" alt="@Package.TrackingCode"/>
            </div>

            <div class="w-full p-6 px-16 border border-dashed border-black">
                <div class="flex justify-between">
                    <span>Weight</span>
                    <span>@(((float?)Package.Weight / 1000)?.ToString("N2")) kg</span>
                </div>
                <div class="flex justify-between">
                    <span>Dimensions (w, h, l) cm:</span>
                    <span>@(Package.Dimensions is { X: var x, Y: var y, Z: var z } ? $"{x}, {y}, {z}" : "")</span>
                </div>
            </div>
        </Content>
        <Footer class="pt-4 border border-dashed border-black text-lg text-bold text-muted-foreground">
            <div class="w-full">
                <div class="flex justify-between">
                    <span>Label created at:</span>
                    <span>@CurrentUser.ConvertTimeToUserTime(DateTime.UtcNow).ToString("yyyy-MM-dd HH:mm:ss UTCzzz")</span>
                </div>
                <div class="flex justify-between">
                    <span>Package ID:</span>
                    <span>@Id</span>
                </div>
            </div>
        </Footer>
    </Card>
}

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    private PackageId? PackageId => Domain.Aggregates.PackageId.TryParse(Id, null, out var id) ? id : null;
    private Package? Package { get; set; }
    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await CurrentUser.GetCurrentUserAsync(CancellationToken);
        Package = await DbContext.Packages
            .Include(package => package.Owner)
            .FirstOrDefaultAsync(x => x.Id == PackageId, CancellationToken);

        ShowInfo("The label will be printed shortly");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Printer.Print("#label", CancellationToken);
            await Task.Delay(1500);
            // NavigationManager.NavigateTo("/packages/all/?status=InWarehouse");
        }
    }
}