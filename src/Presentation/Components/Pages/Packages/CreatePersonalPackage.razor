@page "/packages/new/personal"
@using Application.Cqrs.Packages.Commands
@using Application.Services
@using Domain.Aggregates
@using Domain.Common
@using Microsoft.EntityFrameworkCore
@using Domain.ValueObjects
@attribute [Authorize(Roles = "Staff,Admin")]
@inject IAppDbContext DbContext

<PageTitle>@Locale.declare_new_personal_package</PageTitle>

<Card>
    <Header>
        <CardTitle>@Locale.declare_new_personal_package</CardTitle>
        <Description>
            @Locale.please_predeclare_your_online_shopping_package_so_that_there_arent_any_delays_when_shipping_id
        </Description>
    </Header>
    <Content>
        <AppForm @bind-Model="Command" OnValidSubmit="OnValidSubmit" novalidate>
            <InlineFormFieldContainer>
                <FormField>
                    <FormLabel for="sender" class="font-bold text-xl">
                        @(Command.CreateSender ? "Create" : "Choose")
                        @Locale.sender
                    </FormLabel>

                    @if (Command.CreateSender)
                    {
                        <InlineFormFieldContainer>
                            <FormField>
                                <FormLabel for="sender-name">@Locale.full_name</FormLabel>
                                <FormInputText id="sender-name" @bind-Value="Command.SenderUsername" placeholder="Enter Name" required/>
                                <FormInvalidFeedback For="@(() => Command.SenderUsername)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="sender-id">@Locale.personal_id</FormLabel>
                                <FormInputText id="sender-id" @bind-Value="Command.SenderId" placeholder="Enter Id" required/>
                                <FormInvalidFeedback For="@(() => Command.SenderId)"/>
                            </FormField>

                            <FormField>
                                <FormLabel for="sender-email">@Locale.email</FormLabel>
                                <FormInputText id="sender-email" @bind-Value="Command.SenderEmail" type="email" placeholder="Enter Email"
                                               required/>
                                <FormInvalidFeedback For="@(() => Command.SenderEmail)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="sender-phone">@Locale.phone_number</FormLabel>
                                <FormInputText id="sender-phone" @bind-Value="Command.SenderMobileNumber" type="tel"
                                               placeholder="Enter Phone" required/>
                                <FormInvalidFeedback For="@(() => Command.SenderMobileNumber)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="sender-phone">@Locale.home_number</FormLabel>
                                <FormInputText id="sender-phone" @bind-Value="Command.SenderHomeNumber" type="tel" placeholder="Enter Phone"
                                               required/>
                                <FormInvalidFeedback For="@(() => Command.SenderHomeNumber)"/>
                            </FormField>
                        </InlineFormFieldContainer>
                    }
                    else
                    {
                        <FormLabel for="sender">@Locale.choose_sender</FormLabel>
                        <select id="sender" @onchange="@SetSender" class="@FormInputText.BaseClass" required>
                            <option value="null" disabled selected>-- @Locale.select_option --</option>

                            @foreach (var user in Users.Where(user => user != Command.Receiver))
                            {
                                <option value="@user.Id">@(user.Username.CapitalizeName())</option>
                            }
                        </select>
                        <FormInvalidFeedback For="@(() => Command.Sender)"/>
                    }

                    @if (Command.Sender is null)
                    {
                        <Button Variant="outline" @onclick="@(() => Command.CreateSender = !Command.CreateSender)" type="button">
                            @if (Command.CreateSender)
                            {
                                <Blazicon Svg="@Lucide.Users"/>
                                @Locale.choose_sender
                            }
                            else
                            {
                                <Blazicon Svg="@Lucide.UserPlus"/>
                                @Locale.create_sender
                            }
                        </Button>
                    }
                </FormField>

                <FormField>
                    <FormLabel for="receiver" class="font-bold text-xl">
                        @(Command.CreateReceiver ? "Create" : "Choose")
                        @Locale.receiver
                    </FormLabel>

                    @if (Command.CreateReceiver)
                    {
                        <InlineFormFieldContainer>
                            <FormField>
                                <FormLabel for="receiver-name">@Locale.full_name</FormLabel>
                                <FormInputText id="receiver-name" @bind-Value="Command.ReceiverUsername" placeholder="Enter Name" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverUsername)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="receiver-id">@Locale.personal_id</FormLabel>
                                <FormInputText id="receiver-id" @bind-Value="Command.ReceiverId" placeholder="Enter Id" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverId)"/>
                            </FormField>

                            <FormField>
                                <FormLabel for="receiver-email">@Locale.email</FormLabel>
                                <FormInputText id="receiver-email" @bind-Value="Command.ReceiverEmail" type="email"
                                               placeholder="Enter Email" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverEmail)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="receiver-phone">@Locale.phone_number</FormLabel>
                                <FormInputText id="receiver-phone" @bind-Value="Command.ReceiverMobileNumber" type="tel"
                                               placeholder="Enter Phone" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverMobileNumber)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="receiver-phone">@Locale.home_number</FormLabel>
                                <FormInputText id="receiver-phone" @bind-Value="Command.ReceiverHomeNumber" type="tel"
                                               placeholder="Enter Phone" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverHomeNumber)"/>
                            </FormField>
                        </InlineFormFieldContainer>
                    }
                    else
                    {
                        <FormLabel for="receiver">@Locale.choose_receiver</FormLabel>
                        <select id="receiver" @onchange="@SetReceiver" class="@FormInputText.BaseClass" required>
                            <option value="null" disabled selected>-- @Locale.select_option --</option>

                            @foreach (var user in Users.Where(user => user != Command.Sender))
                            {
                                <option value="@user.Id">@(user.Username.CapitalizeName())</option>
                            }
                        </select>
                        <FormInvalidFeedback For="@(() => Command.Receiver)"/>
                    }

                    @if (Command.Receiver is null)
                    {
                        <Button Variant="outline" @onclick="@(() => Command.CreateReceiver = !Command.CreateReceiver)" type="button">
                            @if (Command.CreateReceiver)
                            {
                                <Blazicon Svg="@Lucide.Users"/>
                                @Locale.choose_receiver
                            }
                            else
                            {
                                <Blazicon Svg="@Lucide.UserPlus"/>
                                @Locale.create_receiver
                            }
                        </Button>
                    }
                </FormField>
            </InlineFormFieldContainer>

            <Button type="submit" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
                }
                @Locale.declare
            </Button>
        </AppForm>
    </Content>
</Card>

@code {
    private CreatePersonalPackageCommand Command { get; set; } = new();
    private IEnumerable<User> Users { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Users = await DbContext.Users
            .Where(user => user.Role == Role.User)
            .ToListAsync(CancellationToken);
    }

    private void SetSender(ChangeEventArgs args)
    {
        Command.Sender = Users.FirstOrDefault(u => u.Id == UserId.Parse(args.Value?.ToString()!))!;
        Command.CreateSender = false;
    }

    private void SetReceiver(ChangeEventArgs args)
    {
        Command.Receiver = Users.FirstOrDefault(u => u.Id == UserId.Parse(args.Value?.ToString()!))!;
        Command.CreateReceiver = false;
    }

    private async Task OnValidSubmit()
    {
        try
        {
            var package = await SendCommandAsync(Command);
            ShowSuccess("You successfully declared your package!");
            Command = new CreatePersonalPackageCommand();

            NavigationManager.NavigateTo($"/packages/{package.Id}");
        }
        catch (InvalidOperationException ex)
        {
            ShowError(ex.Message);
        }
    }
}