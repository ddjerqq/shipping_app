@page "/packages/new/personal"
@using Application.Cqrs.Packages.Commands
@using Application.Services
@using Domain.Aggregates
@using Domain.Common
@using Microsoft.EntityFrameworkCore
@using Domain.ValueObjects

@attribute [Authorize(Roles = "Staff,Admin")]

@inject IAppDbContext DbContext
@inject ICurrentUserAccessor CurrentUser

<PageTitle>Declare new personal package</PageTitle>

<Card>
    <Header>
        <CardTitle>Declare new package</CardTitle>
        <Description>Declare a personal package</Description>
    </Header>
    <Content>
        <AppForm @bind-Model="Command" OnValidSubmit="OnValidSubmit" novalidate>
            <InlineFormFieldContainer>
                <FormField>
                    <FormLabel for="sender" class="font-bold text-xl">
                        @(Command.CreateSender ? "Create" : "Choose")
                        Sender
                    </FormLabel>

                    @if (Command.CreateSender)
                    {
                        <InlineFormFieldContainer>
                            <FormField>
                                <FormLabel for="sender-name">Name</FormLabel>
                                <FormInputText id="sender-name" @bind-Value="Command.SenderUsername" placeholder="Enter Name" required/>
                                <FormInvalidFeedback For="@(() => Command.SenderUsername)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="sender-id">Id</FormLabel>
                                <FormInputText id="sender-id" @bind-Value="Command.SenderId" placeholder="Enter Id" required/>
                                <FormInvalidFeedback For="@(() => Command.SenderId)"/>
                            </FormField>

                            <FormField>
                                <FormLabel for="sender-email">Email</FormLabel>
                                <FormInputText id="sender-email" @bind-Value="Command.SenderEmail" type="email" placeholder="Enter Email" required/>
                                <FormInvalidFeedback For="@(() => Command.SenderEmail)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="sender-phone">Phone</FormLabel>
                                <FormInputText id="sender-phone" @bind-Value="Command.SenderPhone" type="tel" placeholder="Enter Phone" required/>
                                <FormInvalidFeedback For="@(() => Command.SenderPhone)"/>
                            </FormField>
                        </InlineFormFieldContainer>
                    }
                    else
                    {
                        <FormLabel for="sender">Choose sender</FormLabel>
                        <select id="sender" @onchange="@SetSender" class="@FormInputText.BaseClass" required>
                            <option value="null" disabled selected>-- select option --</option>

                            @foreach (var user in Users.Where(user => user != Command.Receiver))
                            {
                                <option value="@user.Id">@(user.Username.CapitalizeName())</option>
                            }
                        </select>
                        <FormInvalidFeedback For="@(() => Command.Sender)"/>
                    }

                    @if (Command.Sender is null)
                    {
                        <Button Variant="outline" @onclick="@(() => Command.CreateSender = !Command.CreateSender)" type="button">
                            @if (Command.CreateSender)
                            {
                                <Blazicon Svg="@Lucide.Users"/>
                                @:Choose Sender
                            }
                            else
                            {
                                <Blazicon Svg="@Lucide.UserPlus"/>
                                @:Create Sender
                            }
                        </Button>
                    }
                </FormField>

                <FormField>
                    <FormLabel for="receiver" class="font-bold text-xl">
                        @(Command.CreateReceiver ? "Create" : "Choose")
                        Receiver
                    </FormLabel>

                    @if (Command.CreateReceiver)
                    {
                        <InlineFormFieldContainer>
                            <FormField>
                                <FormLabel for="receiver-name">Name</FormLabel>
                                <FormInputText id="receiver-name" @bind-Value="Command.ReceiverUsername" placeholder="Enter Name" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverUsername)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="receiver-id">Id</FormLabel>
                                <FormInputText id="receiver-id" @bind-Value="Command.ReceiverId" placeholder="Enter Id" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverId)"/>
                            </FormField>

                            <FormField>
                                <FormLabel for="receiver-email">Email</FormLabel>
                                <FormInputText id="receiver-email" @bind-Value="Command.ReceiverEmail" type="email" placeholder="Enter Email" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverEmail)"/>
                            </FormField>
                            <FormField>
                                <FormLabel for="receiver-phone">Phone</FormLabel>
                                <FormInputText id="receiver-phone" @bind-Value="Command.ReceiverPhone" type="tel" placeholder="Enter Phone" required/>
                                <FormInvalidFeedback For="@(() => Command.ReceiverPhone)"/>
                            </FormField>
                        </InlineFormFieldContainer>
                    }
                    else
                    {
                        <FormLabel for="receiver">Choose receiver</FormLabel>
                        <select id="receiver" @onchange="@SetReceiver" class="@FormInputText.BaseClass" required>
                            <option value="null" disabled selected>-- select option --</option>

                            @foreach (var user in Users.Where(user => user != Command.Sender))
                            {
                                <option value="@user.Id">@(user.Username.CapitalizeName())</option>
                            }
                        </select>
                        <FormInvalidFeedback For="@(() => Command.Receiver)"/>
                    }

                    @if (Command.Receiver is null)
                    {
                        <Button Variant="outline" @onclick="@(() => Command.CreateReceiver = !Command.CreateReceiver)" type="button">
                            @if (Command.CreateReceiver)
                            {
                                <Blazicon Svg="@Lucide.Users"/>
                                @:Choose Receiver
                            }
                            else
                            {
                                <Blazicon Svg="@Lucide.UserPlus"/>
                                @:Create Receiver
                            }
                        </Button>
                    }
                </FormField>
            </InlineFormFieldContainer>

            <Button type="submit" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <Blazicon Svg="Icons.Loader" class="mr-2 size-4 animate-spin"/>
                }
                Declare
            </Button>
        </AppForm>
    </Content>
</Card>

@code {
    private CreatePersonalPackageCommand Command { get; set; } = new();
    private IEnumerable<User> Users { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Users = await DbContext.Users
            .Where(user => user.Role == Role.User)
            .ToListAsync(CancellationToken);
    }

    private void SetSender(ChangeEventArgs args)
    {
        Command.Sender = Users.FirstOrDefault(u => u.Id == UserId.Parse(args.Value?.ToString()!))!;
        Command.CreateSender = false;
    }

    private void SetReceiver(ChangeEventArgs args)
    {
        Command.Receiver = Users.FirstOrDefault(u => u.Id == UserId.Parse(args.Value?.ToString()!))!;
        Command.CreateReceiver = false;
    }

    private async Task OnValidSubmit()
    {
        await SendCommandAsync(Command);
        ShowSuccess("You successfully declared your package!");
        Command = new CreatePersonalPackageCommand();
    }
}