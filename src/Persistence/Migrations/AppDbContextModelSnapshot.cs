// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Application.Common.OutboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("error");

                    b.Property<DateTimeOffset>("OccuredOn")
                        .HasColumnType("TEXT")
                        .HasColumnName("occured_on");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_on");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_outbox_messages");

                    b.ToTable("outbox_messages");
                });

            modelBuilder.Entity("Domain.Aggregates.Package", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("destination")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true);

                    b.Property<string>("Dimensions")
                        .HasColumnType("TEXT")
                        .HasColumnName("dimensions");

                    b.Property<bool>("HouseDelivery")
                        .HasColumnType("INTEGER")
                        .HasColumnName("house_delivery");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_paid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("origin")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<string>("RaceId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("race_id");

                    b.Property<string>("RetailPrice")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("retail_price");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("tracking_code");

                    b.Property<string>("WebsiteAddress")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("website_address");

                    b.Property<double?>("WeightGrams")
                        .HasColumnType("REAL")
                        .HasColumnName("weight_grams");

                    b.HasKey("Id")
                        .HasName("p_k_package");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("i_x_package_owner_id");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("i_x_package_race_id");

                    b.ToTable("package");
                });

            modelBuilder.Entity("Domain.Aggregates.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("AddressInfo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address_info")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("CultureInfo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("culture_info");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsQueryable", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsUniqueIndex", true);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("EmailShadowHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email_shadow_hash");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("lockout_end");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("personal_id")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsQueryable", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsUniqueIndex", true);

                    b.Property<string>("PersonalIdShadowHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("personal_id_shadow_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsQueryable", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsUniqueIndex", true);

                    b.Property<string>("PhoneNumberShadowHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number_shadow_hash");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("security_stamp");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("time_zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("username")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsQueryable", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsUniqueIndex", false);

                    b.Property<string>("UsernameShadowHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username_shadow_hash");

                    b.HasKey("Id")
                        .HasName("p_k_user");

                    b.HasIndex("PersonalId")
                        .IsUnique()
                        .HasDatabaseName("i_x_user_personal_id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Domain.Entities.PackageReceptionStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("PackageId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("package_id");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_package_reception_status");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("i_x_package_reception_status_package_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_package_reception_status_user_id");

                    b.ToTable("package_reception_status");
                });

            modelBuilder.Entity("Domain.Entities.Race", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Arrival")
                        .HasColumnType("TEXT")
                        .HasColumnName("arrival");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("destination")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true);

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("origin")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true);

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("TEXT")
                        .HasColumnName("start");

                    b.HasKey("Id")
                        .HasName("p_k_race");

                    b.ToTable("race");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_role_name");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Domain.Entities.RoleClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("p_k_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("i_x_role_claim_role_id");

                    b.ToTable("role_claim");
                });

            modelBuilder.Entity("Domain.Entities.UserClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_user_claim_user_id");

                    b.ToTable("user_claim");
                });

            modelBuilder.Entity("Domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_address")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true);

                    b.Property<DateTimeOffset>("LastActive")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_active");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("location")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true);

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_agent")
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsEncrypted", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsQueryable", true)
                        .HasAnnotation("Klean.EntityFrameworkCore.DataProtection.IsUniqueIndex", false);

                    b.Property<string>("UserAgentShadowHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_agent_shadow_hash");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_user_login_user_id");

                    b.ToTable("user_login");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("p_k_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("i_x_user_role_role_id");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("Domain.Aggregates.Package", b =>
                {
                    b.HasOne("Domain.Aggregates.User", "Owner")
                        .WithMany("Packages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_package__user_owner_id");

                    b.HasOne("Domain.Entities.Race", "Race")
                        .WithMany("Packages")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_package__race_race_id");

                    b.Navigation("Owner");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Domain.Entities.PackageReceptionStatus", b =>
                {
                    b.HasOne("Domain.Aggregates.Package", "Package")
                        .WithMany("Statuses")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_package_reception_status_package_package_id");

                    b.HasOne("Domain.Aggregates.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_package_reception_status_user_user_id");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_role_claim_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("Domain.Aggregates.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_user_claim_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("Domain.Aggregates.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_user_login_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_user_role_role_role_id");

                    b.HasOne("Domain.Aggregates.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_user_role_user_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Aggregates.Package", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Domain.Aggregates.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Packages");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Race", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
